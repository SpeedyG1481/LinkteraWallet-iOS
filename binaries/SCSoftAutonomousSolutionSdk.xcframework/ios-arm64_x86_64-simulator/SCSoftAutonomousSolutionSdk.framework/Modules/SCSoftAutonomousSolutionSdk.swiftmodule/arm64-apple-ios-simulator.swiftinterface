// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 effective-4.2 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name SCSoftAutonomousSolutionSdk
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import Combine
import CommonCrypto
import CoreGraphics
import CoreImage
import CoreNFC
import CryptoKit
import CryptoTokenKit
import DeveloperToolsSupport
import Foundation
import ImageIO
import OSLog
import OpenSSL
@_exported import SCSoftAutonomousSolutionSdk
import Speech
import Swift
import SwiftUI
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import libtesseract
public class SCSoftKycAdditionalPersonDetails : Swift.Codable {
  public var custodyInformation: Swift.String?
  public var fullDateOfBirth: Swift.String?
  public var fullName: Swift.String?
  public var nameOfHolder: Swift.String?
  public var otherNames: [Swift.String]?
  public var otherValidTDNumbers: [Swift.String]?
  public var permanentAddress: [Swift.String]?
  public var personalNumber: Swift.String?
  public var personalSummary: Swift.String?
  public var placeOfBirth: [Swift.String]?
  public var profession: Swift.String?
  public var proofOfCitizenship: Swift.String?
  public var tag: Swift.String?
  public var tagPresenceList: [Swift.String]?
  public var telephone: Swift.String?
  public var title: Swift.String?
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 13, macOS 10.15, *)
public enum NFCViewDisplayMessage {
  case requestPresentPassport
  case authenticatingWithPassport(Swift.Int)
  case readingDataGroupProgress(SCSoftAutonomousSolutionSdk.DataGroupId, Swift.Int)
  case error(SCSoftAutonomousSolutionSdk.NFCPassportReaderError)
  case activeAuthentication
  case successfulRead
}
@available(iOS 13, macOS 10.15, *)
extension SCSoftAutonomousSolutionSdk.NFCViewDisplayMessage {
  public var description: Swift.String {
    get
  }
}
public protocol KycSdkIdBackDelegate : AnyObject {
  func didCaptureIdBackPhoto(model: SCSoftAutonomousSolutionSdk.KycSdkIdBackModel)
  func didCloseIdBack()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class KycSdkIdBackViewController : UIKit.UIViewController, SCSoftAutonomousSolutionSdk.SCSoftKycIdBackPhotoViewDelegate {
  @_Concurrency.MainActor(unsafe) public var infoIdBackText: Swift.String
  @_Concurrency.MainActor(unsafe) public var speechText: Swift.String
  @_Concurrency.MainActor(unsafe) public var passportInfoIdBackText: Swift.String
  @_Concurrency.MainActor(unsafe) public var passportSpeechText: Swift.String
  @_Concurrency.MainActor(unsafe) public var noBackCamera: Swift.String
  @_Concurrency.MainActor(unsafe) public var labelTextExit: Swift.String
  @_Concurrency.MainActor(unsafe) public var isPassport: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isSpeech: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var autoTakePhoto: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var hasCameraSound: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenCloseButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var headerVisibility: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var headerText: Swift.String
  @_Concurrency.MainActor(unsafe) public var headerTextColor: Swift.String
  @_Concurrency.MainActor(unsafe) public var headerTextSize: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var headerViewBackgroundColor: Swift.String
  @_Concurrency.MainActor(unsafe) public var headerBackButtonImage_base64: Swift.String
  @_Concurrency.MainActor(unsafe) public var headerBackButtonSize: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var headerViewSize: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SCSoftAutonomousSolutionSdk.KycSdkIdBackDelegate)?
  @_Concurrency.MainActor(unsafe) public var language: Swift.String
  @_Concurrency.MainActor(unsafe) public func didReadMrz(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycIdBackPhotoView, didRead mrzInformation: SCSoftAutonomousSolutionSdk.SCSoftKycMRZInformation)
  @_Concurrency.MainActor(unsafe) public func didCaptureIdBackPhoto(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycIdBackPhotoView, image: UIKit.UIImage, imageBase64: Swift.String, cropImage: UIKit.UIImage, cropImageBase64: Swift.String)
  @_Concurrency.MainActor(unsafe) public func didClose(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycIdBackPhotoView)
  @_Concurrency.MainActor(unsafe) public func didAgeControlOver18(status: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@available(iOS 12, *)
public protocol KycSdkSelfieAndHeadPoseDelegate : AnyObject {
  func didAutonomousFacePredictionHeadPoseSuccess(model: SCSoftAutonomousSolutionSdk.KycSdkSelfieAndHeadPoseModel)
  func didCloseSelfieAndHeadPose()
}
@objc @_inheritsConvenienceInitializers @available(iOS 12, *)
@_Concurrency.MainActor(unsafe) public class KycSdkSelfieAndHeadPoseViewController : UIKit.UIViewController, SCSoftAutonomousSolutionSdk.SCSoftKycHeadPoseViewDelegate, SCSoftAutonomousSolutionSdk.SCSoftKycSelfieViewDelegate {
  @_Concurrency.MainActor(unsafe) public func sendServiceScreenRecord(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycSelfieView, recordBase64: Foundation.URL)
  @_Concurrency.MainActor(unsafe) public func sendServiceScreenRecord(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycHeadPoseView, recordBase64: Foundation.URL)
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SCSoftAutonomousSolutionSdk.KycSdkSelfieAndHeadPoseDelegate)?
  @_Concurrency.MainActor(unsafe) public var speechTextLeft: Swift.String
  @_Concurrency.MainActor(unsafe) public var speechTextRight: Swift.String
  @_Concurrency.MainActor(unsafe) public var infoHeadPoseTextPart1: Swift.String
  @_Concurrency.MainActor(unsafe) public var infoHeadPoseTextPart2: Swift.String
  @_Concurrency.MainActor(unsafe) public var txtInfoLeft: Swift.String
  @_Concurrency.MainActor(unsafe) public var txtInfoRight: Swift.String
  @_Concurrency.MainActor(unsafe) public var noFrontCamera: Swift.String
  @_Concurrency.MainActor(unsafe) public var txtContinue: Swift.String
  @_Concurrency.MainActor(unsafe) public var txtExit: Swift.String
  @_Concurrency.MainActor(unsafe) public var isHiddenCloseButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenInformationLabel: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var language: Swift.String
  @_Concurrency.MainActor(unsafe) public var isSpeech: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var hasCameraSound: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var autoSizeFaceCircle: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var faceProximityControl: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var faceProximityPercentage: Swift.Int
  @_Concurrency.MainActor(unsafe) public var speechText: Swift.String
  @_Concurrency.MainActor(unsafe) public var infoSelfieText: Swift.String
  @_Concurrency.MainActor(unsafe) public var states: [Swift.String]
  @_Concurrency.MainActor(unsafe) public func didCaptureSelfiePhoto(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycSelfieView, image: UIKit.UIImage, imageBase64: Swift.String, cropImage: UIKit.UIImage, cropImageBase64: Swift.String)
  @_Concurrency.MainActor(unsafe) public func didClose(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycSelfieView)
  @_Concurrency.MainActor(unsafe) public func didClose(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycHeadPoseView)
  @_Concurrency.MainActor(unsafe) public func didAutonomousFacePredictionHeadPoseSuccess(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycHeadPoseView, image: UIKit.UIImage, imageBase64: Swift.String, direction: SCSoftAutonomousSolutionSdk.HeadPosition)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public var direction: SCSoftAutonomousSolutionSdk.HeadPosition
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@available(iOS 13, *)
public class BACHandler {
  public var ksenc: [Swift.UInt8]
  public var ksmac: [Swift.UInt8]
  public var kifd: [Swift.UInt8]
  public init()
  public init(tagReader: SCSoftAutonomousSolutionSdk.TagReader)
  #if compiler(>=5.3) && $AsyncAwait
  public func performBACAndGetSessionKeys(mrzKey: Swift.String) async throws
  #endif
  public func sessionKeys(data: [Swift.UInt8]) throws -> ([Swift.UInt8], [Swift.UInt8], [Swift.UInt8])
  @objc deinit
}
public enum AnimationType {
  case systemActivityIndicator
  case horizontalCirclesPulse
  case lineScaling
  case singleCirclePulse
  case multipleCirclePulse
  case singleCircleScaleRipple
  case multipleCircleScaleRipple
  case circleSpinFade
  case lineSpinFade
  case circleRotateChase
  case circleStrokeSpin
  public static func == (a: SCSoftAutonomousSolutionSdk.AnimationType, b: SCSoftAutonomousSolutionSdk.AnimationType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AnimatedIcon {
  case succeed
  case failed
  case added
  public static func == (a: SCSoftAutonomousSolutionSdk.AnimatedIcon, b: SCSoftAutonomousSolutionSdk.AnimatedIcon) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AlertIcon {
  case heart
  case doc
  case bookmark
  case moon
  case star
  case exclamation
  case flag
  case message
  case question
  case bolt
  case shuffle
  case eject
  case card
  case rotate
  case like
  case dislike
  case privacy
  case cart
  case search
  public static func == (a: SCSoftAutonomousSolutionSdk.AlertIcon, b: SCSoftAutonomousSolutionSdk.AlertIcon) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, *)
extension SCSoftAutonomousSolutionSdk.ProgressHUD {
  @_Concurrency.MainActor(unsafe) public class var animationType: SCSoftAutonomousSolutionSdk.AnimationType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public class var colorBackground: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public class var colorHUD: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public class var colorStatus: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public class var colorAnimation: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public class var colorProgress: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public class var fontStatus: UIKit.UIFont {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public class var imageSuccess: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public class var imageError: UIKit.UIImage {
    get
    set
  }
}
@available(iOS 13.0, *)
extension SCSoftAutonomousSolutionSdk.ProgressHUD {
  @_Concurrency.MainActor(unsafe) public class func dismiss()
  @_Concurrency.MainActor(unsafe) public class func remove()
  @_Concurrency.MainActor(unsafe) public class func show(_ status: Swift.String? = nil, interaction: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public class func show(_ status: Swift.String? = nil, icon: SCSoftAutonomousSolutionSdk.AnimatedIcon, interaction: Swift.Bool = true, delay: Foundation.TimeInterval? = nil)
  @_Concurrency.MainActor(unsafe) public class func showSucceed(_ status: Swift.String? = nil, interaction: Swift.Bool = true, delay: Foundation.TimeInterval? = nil)
  @_Concurrency.MainActor(unsafe) public class func showFailed(_ status: Swift.String? = nil, interaction: Swift.Bool = true, delay: Foundation.TimeInterval? = nil)
  @_Concurrency.MainActor(unsafe) public class func showAdded(_ status: Swift.String? = nil, interaction: Swift.Bool = true, delay: Foundation.TimeInterval? = nil)
  @_Concurrency.MainActor(unsafe) public class func show(_ status: Swift.String? = nil, icon: SCSoftAutonomousSolutionSdk.AlertIcon, interaction: Swift.Bool = true, delay: Foundation.TimeInterval? = nil)
  @_Concurrency.MainActor(unsafe) public class func showSuccess(_ status: Swift.String? = nil, image: UIKit.UIImage? = nil, interaction: Swift.Bool = true, delay: Foundation.TimeInterval? = nil)
  @_Concurrency.MainActor(unsafe) public class func showError(_ status: Swift.String? = nil, image: UIKit.UIImage? = nil, interaction: Swift.Bool = true, delay: Foundation.TimeInterval? = nil)
  @_Concurrency.MainActor(unsafe) public class func showProgress(_ progress: CoreFoundation.CGFloat, interaction: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public class func showProgress(_ status: Swift.String?, _ progress: CoreFoundation.CGFloat, interaction: Swift.Bool = false)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13.0, *)
@_Concurrency.MainActor(unsafe) public class ProgressHUD : UIKit.UIView {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup12 : SCSoftAutonomousSolutionSdk.DataGroup {
  public var issuingAuthority: Swift.String? {
    get
  }
  public var dateOfIssue: Swift.String? {
    get
  }
  public var otherPersonsDetails: Swift.String? {
    get
  }
  public var endorsementsOrObservations: Swift.String? {
    get
  }
  public var taxOrExitRequirements: Swift.String? {
    get
  }
  public var frontImage: [Swift.UInt8]? {
    get
  }
  public var rearImage: [Swift.UInt8]? {
    get
  }
  public var personalizationTime: Swift.String? {
    get
  }
  public var personalizationDeviceSerialNr: Swift.String? {
    get
  }
  override public var datagroupType: SCSoftAutonomousSolutionSdk.DataGroupId {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class COM : SCSoftAutonomousSolutionSdk.DataGroup {
  public var version: Swift.String {
    get
  }
  public var unicodeVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  override public var datagroupType: SCSoftAutonomousSolutionSdk.DataGroupId {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum DocTypeEnum : Swift.String {
  case TD1
  case TD2
  case OTHER
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup1 : SCSoftAutonomousSolutionSdk.DataGroup {
  public var elements: [Swift.String : Swift.String] {
    get
  }
  override public var datagroupType: SCSoftAutonomousSolutionSdk.DataGroupId {
    get
  }
  @objc deinit
}
public struct RecognizedBlock {
  public var text: Swift.String
  public var boundingBox: CoreFoundation.CGRect
  public var confidence: Swift.Float
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class CardAccess {
  public var securityInfos: [SCSoftAutonomousSolutionSdk.SecurityInfo] {
    get
  }
  @objc deinit
}
public enum HeadPosition {
  case left
  case right
  public static func == (a: SCSoftAutonomousSolutionSdk.HeadPosition, b: SCSoftAutonomousSolutionSdk.HeadPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 12, *)
public protocol SCSoftKycHeadPoseViewDelegate : AnyObject {
  func didAutonomousFacePredictionHeadPoseSuccess(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycHeadPoseView, image: UIKit.UIImage, imageBase64: Swift.String, direction: SCSoftAutonomousSolutionSdk.HeadPosition)
  func didClose(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycHeadPoseView)
  func sendServiceScreenRecord(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycHeadPoseView, recordBase64: Foundation.URL)
}
@objc @_inheritsConvenienceInitializers @available(iOS 12, *)
@IBDesignable @_Concurrency.MainActor(unsafe) public class SCSoftKycHeadPoseView : UIKit.UIView, AVFoundation.AVCaptureFileOutputRecordingDelegate {
  @_Concurrency.MainActor(unsafe) public var labelTextColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var labelFont: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) public var labelTextColorBold: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var buttonBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var buttonTitleColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var buttonFont: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) public var buttonRadius: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var activeColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var passiveColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var buttonCameraActiveImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var buttonCameraPassiveImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var buttonCloseImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var isHiddenIdPhotoCameraButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenCloseButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenInformationLabel: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var informationLabelNSAttributedString: Foundation.NSAttributedString?
  @_Concurrency.MainActor(unsafe) public var yawAngle: Swift.Int
  @_Concurrency.MainActor(unsafe) public var speechTextLeft: Swift.String
  @_Concurrency.MainActor(unsafe) public var speechTextRight: Swift.String
  @_Concurrency.MainActor(unsafe) public var infoHeadPoseTextPart1: Swift.String
  @_Concurrency.MainActor(unsafe) public var infoHeadPoseTextPart2: Swift.String
  @_Concurrency.MainActor(unsafe) public var txtInfoLeft: Swift.String
  @_Concurrency.MainActor(unsafe) public var txtInfoRight: Swift.String
  @_Concurrency.MainActor(unsafe) public var noFrontCamera: Swift.String
  @_Concurrency.MainActor(unsafe) public var txtContinue: Swift.String
  @_Concurrency.MainActor(unsafe) public var txtExit: Swift.String
  @_Concurrency.MainActor(unsafe) public var speechText: Swift.String
  @_Concurrency.MainActor(unsafe) public var IsSpeech: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var autoSizeFaceCircle: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var spoofRecordTime: Swift.Double
  @_Concurrency.MainActor(unsafe) public var screenRecord: Swift.Bool
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SCSoftAutonomousSolutionSdk.SCSoftKycHeadPoseViewDelegate)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func startScanning()
  @_Concurrency.MainActor(unsafe) public func stopScanning()
  @_Concurrency.MainActor(unsafe) public func initiateScreen(initialHeadPosition: SCSoftAutonomousSolutionSdk.HeadPosition)
  @_Concurrency.MainActor(unsafe) public func getMyImage(named: Swift.String) -> UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) @objc public func fileOutput(_ output: AVFoundation.AVCaptureFileOutput, didFinishRecordingTo outputFileURL: Foundation.URL, from connections: [AVFoundation.AVCaptureConnection], error: (any Swift.Error)?)
  @objc deinit
}
@available(iOS 12, *)
extension SCSoftAutonomousSolutionSdk.SCSoftKycHeadPoseView : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
@available(iOS 12, *)
extension SCSoftAutonomousSolutionSdk.SCSoftKycHeadPoseView : AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func metadataOutput(_ output: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from connection: AVFoundation.AVCaptureConnection)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class NotImplementedDG : SCSoftAutonomousSolutionSdk.DataGroup {
  override public var datagroupType: SCSoftAutonomousSolutionSdk.DataGroupId {
    get
  }
  @objc deinit
}
public class SCSoftKycNFCInformation : Swift.Codable {
  public var docType: Swift.Int?
  public var personDetails: SCSoftAutonomousSolutionSdk.SCSoftKycPersonDetails?
  public var additionalPersonDetails: SCSoftAutonomousSolutionSdk.SCSoftKycAdditionalPersonDetails?
  public var mrzText: Swift.String?
  public var certificateBase64: Swift.String?
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public protocol SCSoftKycIdFrontPhotoViewDelegate : AnyObject {
  func didCaptureIdFrontPhoto(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycIdFrontPhotoView, image: UIKit.UIImage, imageBase64: Swift.String, cropImage: UIKit.UIImage, cropImageBase64: Swift.String)
  func didCaptureIdFrontFacePhoto(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycIdFrontPhotoView, image: UIKit.UIImage, imageBase64: Swift.String)
  func didClose(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycIdFrontPhotoView)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class SCSoftKycIdFrontPhotoView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var infoIdFrontText: Swift.String
  @_Concurrency.MainActor(unsafe) public var speechText: Swift.String
  @_Concurrency.MainActor(unsafe) public var noBackCamera: Swift.String
  @_Concurrency.MainActor(unsafe) public var labelTextExit: Swift.String
  @_Concurrency.MainActor(unsafe) public var IsSpeech: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var autoTakePhoto: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var activeColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var passiveColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var buttonBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var buttonTitleColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var buttonFont: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) public var buttonRadius: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var labelTextColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var labelFont: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) public var hasCameraSound: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var buttonCameraActiveImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var buttonCameraPassiveImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var buttonCloseImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var buttonFlashOnImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var buttonFlashOffImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var cameraFlashState: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenIdPhotoInfo: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenIdPhotoCameraButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenIdPhotoFlashButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenCloseButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SCSoftAutonomousSolutionSdk.SCSoftKycIdFrontPhotoViewDelegate)?
  @_Concurrency.MainActor(unsafe) public var areaTopMargin: Swift.Double
  @_Concurrency.MainActor(unsafe) public var idFrontImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var idFrontFaceImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var autoCropped_idFrontImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var base64_idFrontImage: Swift.String?
  @_Concurrency.MainActor(unsafe) public var base64_idFrontFaceImage: Swift.String?
  @_Concurrency.MainActor(unsafe) public var base64_autoCropped_idFrontImage: Swift.String?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func startScanning()
  @_Concurrency.MainActor(unsafe) public func stopScanning()
  @_Concurrency.MainActor(unsafe) public func initiateScreen()
  @_Concurrency.MainActor(unsafe) public func getMyImage(named: Swift.String) -> UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public func refreshData()
  @objc deinit
}
extension SCSoftAutonomousSolutionSdk.SCSoftKycIdFrontPhotoView : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
public class KycSdkIdFrontModel {
  public init()
  public var idFrontImage: UIKit.UIImage?
  public var idFrontFaceImage: UIKit.UIImage?
  public var autoCropped_idFrontImage: UIKit.UIImage?
  public var base64_idFrontImage: Swift.String?
  public var base64_autoCropped_idFrontImage: Swift.String?
  public var base64_idFrontFaceImage: Swift.String?
  public var dictionary: [Swift.String : Swift.String] {
    get
  }
  @objc deinit
}
public class KycSdkIdBackModel {
  public init()
  public var idBackImage: UIKit.UIImage?
  public var autoCropped_idBackImage: UIKit.UIImage?
  public var mrzInformation: SCSoftAutonomousSolutionSdk.KycSdkMrzModel?
  public var base64_idBackImage: Swift.String?
  public var base64_autoCropped_idBackImage: Swift.String?
  public var idCardAgeOver18: Swift.Bool
  public var didAfterMrzCheck: Swift.Bool
  public var dictionary: [Swift.String : Any] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class KycSdkMrzModel {
  public var documentNumber: Swift.String
  public var birthDate: Swift.String
  public var expiryDate: Swift.String
  public var mrzCode: Swift.String
  public var personalNumber: Swift.String
  public var gender: Swift.String
  public var nationality: Swift.String
  public var issuingState: Swift.String
  public var documentCode: Swift.String
  public var optionalData1: Swift.String
  public var optionalData2: Swift.String
  public var primaryIdentifier: Swift.String
  public var secondaryIdentifier: Swift.String
  public var documentType: Swift.String
  public var dictionary: [Swift.String : Any] {
    get
  }
  @objc deinit
}
public class KycSdkSelfieModel {
  public init()
  public var selfieImage: UIKit.UIImage?
  public var autoCropped_selfieImage: UIKit.UIImage?
  public var base64_selfieImage: Swift.String?
  public var base64_autoCropped_selfieImage: Swift.String?
  public var file_screenRecord: Swift.String?
  public var dictionary: [Swift.String : Swift.String] {
    get
  }
  @objc deinit
}
public class KycSdkSelfieAndHeadPoseModel {
  public init()
  public var base64_selfieImage: Swift.String?
  public var base64_headPoseLeftImage: Swift.String?
  public var base64_headPoseRightImage: Swift.String?
  public var dictionary: [Swift.String : Swift.String] {
    get
  }
  @objc deinit
}
public class KycSdkHeadPoseModel {
  public init()
  public var base64_image: Swift.String?
  public var direction: Swift.String?
  public var file_screenRecord: Swift.String?
  public var dictionary: [Swift.String : Swift.String] {
    get
  }
  @objc deinit
}
public class KycSdkHeadPoseOptions {
  public init()
  public var direction: Swift.String
  public var dictionary: [Swift.String : Any] {
    get
  }
  public init(from options: [Swift.String : Any]?)
  @objc deinit
}
public class KycSdkNfcModel {
  public init()
  public var passportModel: SCSoftAutonomousSolutionSdk.KycSdkNfcInformation?
  public var hasNfc: Swift.Bool
  public var dictionary: [Swift.String : Any] {
    get
  }
  @objc deinit
}
public class KycSdkNfcInformation {
  public init()
  public var docType: Swift.Int
  public var mrzText: Swift.String
  public var certificate: Swift.String
  public var fullName: Swift.String
  public var name: Swift.String
  public var surname: Swift.String
  public var personalNumber: Swift.String
  public var gender: Swift.String
  public var birthDate: Swift.String
  public var expiryDate: Swift.String
  public var serialNumber: Swift.String
  public var nationality: Swift.String
  public var issuerAuthority: Swift.String
  public var faceImageBase64: Swift.String
  public var portraitImageBase64: Swift.String
  public var signatureBase64: Swift.String
  public var documentNumber: Swift.String
  public var custodyInformation: Swift.String
  public var fullDateOfBirth: Swift.String
  public var nameOfHolder: Swift.String
  public var personalNumber2: Swift.String
  public var personalSummary: Swift.String
  public var profession: Swift.String
  public var proofOfCitizenship: Swift.String
  public var telephone: Swift.String
  public var title: Swift.String
  public var placeOfBirth: Swift.String
  public var permanentAddress: Swift.String
  @objc deinit
}
public class KycSdkNfcOptions {
  public init()
  public var languageCode: Swift.String
  public var documentNumber: Swift.String
  public var dateOfBirth: Swift.String
  public var dateOfExpiry: Swift.String
  public var dictionary: [Swift.String : Any] {
    get
  }
  public init(from options: [Swift.String : Any]?)
  @objc deinit
}
public class KycSdkIdBackOptions {
  public init()
  public var languageCode: Swift.String
  public var isPassport: Swift.Bool
  public var autoTakePhoto: Swift.Bool
  public var dictionary: [Swift.String : Any] {
    get
  }
  public init(from options: [Swift.String : Any]?)
  @objc deinit
}
public class KycSdkJitsiOptions {
  public init()
  public var url: Swift.String
  public var room: Swift.String
  public var token: Swift.String
  public var dictionary: [Swift.String : Swift.String] {
    get
  }
  public init(from options: [Swift.String : Swift.String]?)
  @objc deinit
}
public class KycSdkIdFrontOptions {
  public init()
  public var languageCode: Swift.String
  public var autoTakePhoto: Swift.Bool
  public var dictionary: [Swift.String : Any] {
    get
  }
  public init(from options: [Swift.String : Any]?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class IDCardUtil : Foundation.ObservableObject {
  public var passportNumber: Swift.String
  public var dateOfBirth: Swift.String
  public var expiryDate: Swift.String
  public var passport: SCSoftAutonomousSolutionSdk.NFCPassportModel?
  public func getMRZKey() -> Swift.String
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum DataGroupId : Swift.Int, Swift.CaseIterable {
  case COM
  case DG1
  case DG2
  case DG3
  case DG4
  case DG5
  case DG6
  case DG7
  case DG8
  case DG9
  case DG10
  case DG11
  case DG12
  case DG13
  case DG14
  case DG15
  case DG16
  case SOD
  case Unknown
  public func getName() -> Swift.String
  public static func getIDFromName(name: Swift.String) -> SCSoftAutonomousSolutionSdk.DataGroupId
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [SCSoftAutonomousSolutionSdk.DataGroupId]
  public typealias RawValue = Swift.Int
  public static var allCases: [SCSoftAutonomousSolutionSdk.DataGroupId] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum PACEMappingType {
  case GM
  case IM
  case CAM
  public static func == (a: SCSoftAutonomousSolutionSdk.PACEMappingType, b: SCSoftAutonomousSolutionSdk.PACEMappingType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class PACEInfo : SCSoftAutonomousSolutionSdk.SecurityInfo {
  public static let PARAM_ID_GFP_1024_160: Swift.Int
  public static let PARAM_ID_GFP_2048_224: Swift.Int
  public static let PARAM_ID_GFP_2048_256: Swift.Int
  public static let PARAM_ID_ECP_NIST_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P320_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P512_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P521_R1: Swift.Int
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getVersion() -> Swift.Int
  public func getParameterId() -> Swift.Int?
  public func getParameterSpec() throws -> Swift.Int32
  public func getMappingType() throws -> SCSoftAutonomousSolutionSdk.PACEMappingType
  public func getKeyAgreementAlgorithm() throws -> Swift.String
  public func getCipherAlgorithm() throws -> Swift.String
  public func getDigestAlgorithm() throws -> Swift.String
  public func getKeyLength() throws -> Swift.Int
  public func createMappingKey() throws -> Swift.OpaquePointer
  public static func getParameterSpec(stdDomainParam: Swift.Int) throws -> Swift.Int32
  public static func toMappingType(oid: Swift.String) throws -> SCSoftAutonomousSolutionSdk.PACEMappingType
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toDigestAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
public enum Device {
  case iPodTouch5
  case iPodTouch6
  case iPodTouch7
  case iPhone4
  case iPhone4s
  case iPhone5
  case iPhone5c
  case iPhone5s
  case iPhone6
  case iPhone6Plus
  case iPhone6s
  case iPhone6sPlus
  case iPhone7
  case iPhone7Plus
  case iPhoneSE
  case iPhone8
  case iPhone8Plus
  case iPhoneX
  case iPhoneXS
  case iPhoneXSMax
  case iPhoneXR
  case iPhone11
  case iPhone11Pro
  case iPhone11ProMax
  case iPhoneSE2
  case iPhone12
  case iPhone12Mini
  case iPhone12Pro
  case iPhone12ProMax
  case iPhone13
  case iPhone13Mini
  case iPhone13Pro
  case iPhone13ProMax
  case iPhoneSE3
  case iPhone14
  case iPhone14Plus
  case iPhone14Pro
  case iPhone14ProMax
  case iPhone15
  case iPhone15Plus
  case iPhone15Pro
  case iPhone15ProMax
  case iPad2
  case iPad3
  case iPad4
  case iPadAir
  case iPadAir2
  case iPad5
  case iPad6
  case iPadAir3
  case iPad7
  case iPad8
  case iPad9
  case iPad10
  case iPadAir4
  case iPadAir5
  case iPadMini
  case iPadMini2
  case iPadMini3
  case iPadMini4
  case iPadMini5
  case iPadMini6
  case iPadPro9Inch
  case iPadPro12Inch
  case iPadPro12Inch2
  case iPadPro10Inch
  case iPadPro11Inch
  case iPadPro12Inch3
  case iPadPro11Inch2
  case iPadPro12Inch4
  case iPadPro11Inch3
  case iPadPro12Inch5
  case iPadPro11Inch4
  case iPadPro12Inch6
  case homePod
  indirect case simulator(SCSoftAutonomousSolutionSdk.Device)
  case unknown(Swift.String)
  public static var current: SCSoftAutonomousSolutionSdk.Device {
    get
  }
  public static var identifier: Swift.String
  public static func mapToDevice(identifier: Swift.String) -> SCSoftAutonomousSolutionSdk.Device
  public static func realDevice(from device: SCSoftAutonomousSolutionSdk.Device) -> SCSoftAutonomousSolutionSdk.Device
  public var diagonal: Swift.Double {
    get
  }
  public var screenRatio: (width: Swift.Double, height: Swift.Double) {
    get
  }
  public static var allPods: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public static var allPhones: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public static var allPads: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  @available(*, deprecated, renamed: "allDevicesWithSensorHousing")
  public static var allXSeriesDevices: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public static var allPlusSizedDevices: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public static var allProDevices: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public static var allMiniDevices: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public static var allSimulatorPods: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public static var allSimulatorPhones: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public static var allSimulatorPads: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public static var allSimulatorMiniDevices: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  @available(*, deprecated, renamed: "allSimulatorDevicesWithSensorHousing")
  public static var allSimulatorXSeriesDevices: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public static var allSimulatorPlusSizedDevices: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public static var allSimulatorProDevices: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public var isPod: Swift.Bool {
    get
  }
  public var isPhone: Swift.Bool {
    get
  }
  public var isPad: Swift.Bool {
    get
  }
  public var realDevice: SCSoftAutonomousSolutionSdk.Device {
    get
  }
  public var isZoomed: Swift.Bool? {
    get
  }
  public static var allTouchIDCapableDevices: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public static var allFaceIDCapableDevices: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public static var allBiometricAuthenticationCapableDevices: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public var isTouchIDCapable: Swift.Bool {
    get
  }
  public var isFaceIDCapable: Swift.Bool {
    get
  }
  public var hasMacroFocus: Swift.Bool {
    get
  }
  public var hasBiometricSensor: Swift.Bool {
    get
  }
  public static var allDevicesWithSensorHousing: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public static var allSimulatorDevicesWithSensorHousing: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public var hasSensorHousing: Swift.Bool {
    get
  }
  public static var allDevicesWithRoundedDisplayCorners: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public var hasRoundedDisplayCorners: Swift.Bool {
    get
  }
  public static var allDevicesWith3dTouchSupport: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public var has3dTouchSupport: Swift.Bool {
    get
  }
  public static var allDevicesWithWirelessChargingSupport: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public var supportsWirelessCharging: Swift.Bool {
    get
  }
  public static var allDevicesWithALidarSensor: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public var hasLidarSensor: Swift.Bool {
    get
  }
  public var isCanvas: Swift.Bool? {
    get
  }
  public static var allRealDevices: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public static var allSimulators: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public var isSimulator: Swift.Bool {
    get
  }
  public func isOneOf(_ devices: [SCSoftAutonomousSolutionSdk.Device]) -> Swift.Bool
  public var name: Swift.String? {
    get
  }
  public var systemName: Swift.String? {
    get
  }
  public var systemVersion: Swift.String? {
    get
  }
  public var model: Swift.String? {
    get
  }
  public var localizedModel: Swift.String? {
    get
  }
  public var ppi: Swift.Int? {
    get
  }
  public var isGuidedAccessSessionActive: Swift.Bool {
    get
  }
  public var screenBrightness: Swift.Int {
    get
  }
}
extension SCSoftAutonomousSolutionSdk.Device : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  public var safeDescription: Swift.String {
    get
  }
}
extension SCSoftAutonomousSolutionSdk.Device : Swift.Equatable {
  public static func == (lhs: SCSoftAutonomousSolutionSdk.Device, rhs: SCSoftAutonomousSolutionSdk.Device) -> Swift.Bool
}
@available(iOS 8.0, watchOS 4.0, *)
extension SCSoftAutonomousSolutionSdk.Device {
  public enum BatteryState : Swift.CustomStringConvertible, Swift.Equatable {
    case full
    case charging(Swift.Int)
    case unplugged(Swift.Int)
    public var lowPowerMode: Swift.Bool {
      get
    }
    public var description: Swift.String {
      get
    }
  }
  public var batteryState: SCSoftAutonomousSolutionSdk.Device.BatteryState? {
    get
  }
  public var batteryLevel: Swift.Int? {
    get
  }
}
@available(iOS 8.0, watchOS 4.0, *)
extension SCSoftAutonomousSolutionSdk.Device.BatteryState : Swift.Comparable {
  public static func == (lhs: SCSoftAutonomousSolutionSdk.Device.BatteryState, rhs: SCSoftAutonomousSolutionSdk.Device.BatteryState) -> Swift.Bool
  public static func < (lhs: SCSoftAutonomousSolutionSdk.Device.BatteryState, rhs: SCSoftAutonomousSolutionSdk.Device.BatteryState) -> Swift.Bool
}
extension SCSoftAutonomousSolutionSdk.Device {
  public enum Orientation {
    case landscape
    case portrait
    public static func == (a: SCSoftAutonomousSolutionSdk.Device.Orientation, b: SCSoftAutonomousSolutionSdk.Device.Orientation) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var orientation: SCSoftAutonomousSolutionSdk.Device.Orientation {
    get
  }
}
extension SCSoftAutonomousSolutionSdk.Device {
  public static var volumeTotalCapacity: Swift.Int? {
    get
  }
  public static var volumeAvailableCapacity: Swift.Int? {
    get
  }
  @available(iOS 11.0, *)
  public static var volumeAvailableCapacityForImportantUsage: Swift.Int64? {
    get
  }
  @available(iOS 11.0, *)
  public static var volumeAvailableCapacityForOpportunisticUsage: Swift.Int64? {
    get
  }
  @available(iOS 11.0, *)
  public static var volumes: [Foundation.URLResourceKey : Swift.Int64]? {
    get
  }
}
extension SCSoftAutonomousSolutionSdk.Device {
  public struct ApplePencilSupport : Swift.OptionSet {
    public var rawValue: Swift.UInt
    public init(rawValue: Swift.UInt)
    public static let firstGeneration: SCSoftAutonomousSolutionSdk.Device.ApplePencilSupport
    public static let secondGeneration: SCSoftAutonomousSolutionSdk.Device.ApplePencilSupport
    public typealias ArrayLiteralElement = SCSoftAutonomousSolutionSdk.Device.ApplePencilSupport
    public typealias Element = SCSoftAutonomousSolutionSdk.Device.ApplePencilSupport
    public typealias RawValue = Swift.UInt
  }
  public static var allApplePencilCapableDevices: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public var applePencilSupport: SCSoftAutonomousSolutionSdk.Device.ApplePencilSupport {
    get
  }
}
extension SCSoftAutonomousSolutionSdk.Device {
  public enum CameraType {
    @available(*, deprecated, renamed: "wide")
    case normal
    case wide
    case telephoto
    case ultraWide
    public static func == (a: SCSoftAutonomousSolutionSdk.Device.CameraType, b: SCSoftAutonomousSolutionSdk.Device.CameraType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var cameras: [SCSoftAutonomousSolutionSdk.Device.CameraType] {
    get
  }
  public static var allDevicesWithCamera: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  @available(*, deprecated, renamed: "allDevicesWithWideCamera")
  public static var allDevicesWithNormalCamera: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public static var allDevicesWithWideCamera: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public static var allDevicesWithTelephotoCamera: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public static var allDevicesWithUltraWideCamera: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public static var allDevicesWithMacroFocus: [SCSoftAutonomousSolutionSdk.Device] {
    get
  }
  public var hasCamera: Swift.Bool {
    get
  }
  @available(*, deprecated, renamed: "hasWideCamera")
  public var hasNormalCamera: Swift.Bool {
    get
  }
  public var hasWideCamera: Swift.Bool {
    get
  }
  public var hasTelephotoCamera: Swift.Bool {
    get
  }
  public var hasUltraWideCamera: Swift.Bool {
    get
  }
}
@available(iOS 11.0, watchOS 4.0, macOS 10.10.3, tvOS 11.0, *)
extension SCSoftAutonomousSolutionSdk.Device {
  public enum ThermalState {
    case nominal
    case fair
    case serious
    case critical
    public static func == (a: SCSoftAutonomousSolutionSdk.Device.ThermalState, b: SCSoftAutonomousSolutionSdk.Device.ThermalState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var thermalState: SCSoftAutonomousSolutionSdk.Device.ThermalState? {
    get
  }
}
extension SCSoftAutonomousSolutionSdk.Device {
  public enum CPU : Swift.Comparable {
    case a4
    case a5
    case a5X
    case a6
    case a6X
    case a7
    case a8
    case a8X
    case a9
    case a9X
    case a10Fusion
    case a10XFusion
    case a11Bionic
    case a12Bionic
    case a12XBionic
    case a12ZBionic
    case a13Bionic
    case a14Bionic
    case a15Bionic
    case a16Bionic
    case a17Pro
    case m1
    case m2
    case unknown
    public static func == (a: SCSoftAutonomousSolutionSdk.Device.CPU, b: SCSoftAutonomousSolutionSdk.Device.CPU) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public static func < (a: SCSoftAutonomousSolutionSdk.Device.CPU, b: SCSoftAutonomousSolutionSdk.Device.CPU) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public var cpu: SCSoftAutonomousSolutionSdk.Device.CPU {
    get
  }
}
extension SCSoftAutonomousSolutionSdk.Device.CPU : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public struct DataGroupHash {
  public var id: Swift.String
  public var sodHash: Swift.String
  public var computedHash: Swift.String
  public var match: Swift.Bool
}
@available(iOS 13, *)
public class PACEHandler {
  public init(cardAccess: SCSoftAutonomousSolutionSdk.CardAccess, tagReader: SCSoftAutonomousSolutionSdk.TagReader) throws
  #if compiler(>=5.3) && $AsyncAwait
  public func doPACE(mrzKey: Swift.String) async throws
  #endif
  @objc deinit
}
public enum ResultIteratorLevel : libtesseract.TessPageIteratorLevel.RawValue {
  case block
  case paragraph
  case textline
  case word
  case symbol
  public var tesseractLevel: libtesseract.TessPageIteratorLevel {
    get
  }
  public init?(rawValue: libtesseract.TessPageIteratorLevel.RawValue)
  public typealias RawValue = libtesseract.TessPageIteratorLevel.RawValue
  public var rawValue: libtesseract.TessPageIteratorLevel.RawValue {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup {
  public var datagroupType: SCSoftAutonomousSolutionSdk.DataGroupId {
    get
  }
  public var body: [Swift.UInt8] {
    get
  }
  public var data: [Swift.UInt8] {
    get
  }
  public func hash(_ hashAlgorythm: Swift.String) -> [Swift.UInt8]
  public func verifyTag(_ tag: Swift.Int, equals expectedTag: Swift.Int) throws
  public func verifyTag(_ tag: Swift.Int, oneOf expectedTags: [Swift.Int]) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup14 : SCSoftAutonomousSolutionSdk.DataGroup {
  public var securityInfos: [SCSoftAutonomousSolutionSdk.SecurityInfo] {
    get
  }
  override public var datagroupType: SCSoftAutonomousSolutionSdk.DataGroupId {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class OpenSSLUtils {
  public static func getOpenSSLError() -> Swift.String
  @available(iOS 13, macOS 10.15, *)
  public static func getPublicKeyData(from key: Swift.OpaquePointer) -> [Swift.UInt8]?
  @available(iOS 13, macOS 10.15, *)
  public static func decodePublicKeyFromBytes(pubKeyData: [Swift.UInt8], params: Swift.OpaquePointer) -> Swift.OpaquePointer?
  public static func computeSharedSecret(privateKeyPair: Swift.OpaquePointer, publicKey: Swift.OpaquePointer) -> [Swift.UInt8]
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup2 : SCSoftAutonomousSolutionSdk.DataGroup {
  public var nrImages: Swift.Int {
    get
  }
  public var versionNumber: Swift.Int {
    get
  }
  public var lengthOfRecord: Swift.Int {
    get
  }
  public var numberOfFacialImages: Swift.Int {
    get
  }
  public var facialRecordDataLength: Swift.Int {
    get
  }
  public var nrFeaturePoints: Swift.Int {
    get
  }
  public var gender: Swift.Int {
    get
  }
  public var eyeColor: Swift.Int {
    get
  }
  public var hairColor: Swift.Int {
    get
  }
  public var featureMask: Swift.Int {
    get
  }
  public var expression: Swift.Int {
    get
  }
  public var poseAngle: Swift.Int {
    get
  }
  public var poseAngleUncertainty: Swift.Int {
    get
  }
  public var faceImageType: Swift.Int {
    get
  }
  public var imageDataType: Swift.Int {
    get
  }
  public var imageWidth: Swift.Int {
    get
  }
  public var imageHeight: Swift.Int {
    get
  }
  public var imageColorSpace: Swift.Int {
    get
  }
  public var sourceType: Swift.Int {
    get
  }
  public var deviceType: Swift.Int {
    get
  }
  public var quality: Swift.Int {
    get
  }
  public var imageData: [Swift.UInt8] {
    get
  }
  override public var datagroupType: SCSoftAutonomousSolutionSdk.DataGroupId {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public func AESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESECBEncrypt(key: [Swift.UInt8], message: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@objc @available(iOS 13, *)
public class PassportReader : ObjectiveC.NSObject {
  public var passiveAuthenticationUsesOpenSSL: Swift.Bool
  public init(masterListURL: Foundation.URL? = nil)
  public func setMasterListURL(_ masterListURL: Foundation.URL)
  public func overrideNFCDataAmountToRead(amount: Swift.Int)
  #if compiler(>=5.3) && $AsyncAwait
  public func readPassport(mrzKey: Swift.String, tags: [SCSoftAutonomousSolutionSdk.DataGroupId] = [], skipSecureElements: Swift.Bool = true, skipCA: Swift.Bool = false, skipPACE: Swift.Bool = false, customDisplayMessage: ((SCSoftAutonomousSolutionSdk.NFCViewDisplayMessage) -> Swift.String?)? = nil) async throws -> SCSoftAutonomousSolutionSdk.NFCPassportModel
  #endif
  @objc deinit
}
@available(iOS 13, *)
extension SCSoftAutonomousSolutionSdk.PassportReader : CoreNFC.NFCTagReaderSessionDelegate {
  public func tagReaderSessionDidBecomeActive(_ session: CoreNFC.NFCTagReaderSession)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didInvalidateWithError error: any Swift.Error)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didDetect tags: [CoreNFC.NFCTag])
}
public protocol SCSoftKycSelfieViewDelegate : AnyObject {
  func didCaptureSelfiePhoto(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycSelfieView, image: UIKit.UIImage, imageBase64: Swift.String, cropImage: UIKit.UIImage, cropImageBase64: Swift.String)
  func didClose(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycSelfieView)
  func sendServiceScreenRecord(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycSelfieView, recordBase64: Foundation.URL)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class SCSoftKycSelfieView : UIKit.UIView, AVFoundation.AVCaptureFileOutputRecordingDelegate {
  @_Concurrency.MainActor(unsafe) public var selfieImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var autoCropped_selfieImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var base64_selfieImage: Swift.String?
  @_Concurrency.MainActor(unsafe) public var base64_autoCropped_selfieImage: Swift.String?
  @_Concurrency.MainActor(unsafe) public var faceProximityControl: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var faceProximityPercentage: Swift.Int
  @_Concurrency.MainActor(unsafe) public var labelTextColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var autoSizeFaceCircle: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var labelFont: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) public var hasCameraSound: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var speechText: Swift.String
  @_Concurrency.MainActor(unsafe) public var IsSpeech: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var infoSelfieText: Swift.String
  @_Concurrency.MainActor(unsafe) public var noFrontCamera: Swift.String
  @_Concurrency.MainActor(unsafe) public var txtExit: Swift.String
  @_Concurrency.MainActor(unsafe) public var txtContinue: Swift.String
  @_Concurrency.MainActor(unsafe) public var buttonBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var buttonTitleColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var buttonFont: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) public var buttonRadius: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var activeColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var passiveColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var buttonCameraActiveImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var buttonCameraPassiveImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var buttonCloseImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var isHiddenIdPhotoCameraButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenCloseButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var hasAutonomousFaceVerify: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var spoofRecordTime: Swift.Double
  @_Concurrency.MainActor(unsafe) public var screenRecord: Swift.Bool
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SCSoftAutonomousSolutionSdk.SCSoftKycSelfieViewDelegate)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func startScanning()
  @_Concurrency.MainActor(unsafe) public func stopScanning()
  @_Concurrency.MainActor(unsafe) public func initiateScreen()
  @_Concurrency.MainActor(unsafe) public func getMyImage(named: Swift.String) -> UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) @objc public func fileOutput(_ output: AVFoundation.AVCaptureFileOutput, didFinishRecordingTo outputFileURL: Foundation.URL, from connections: [AVFoundation.AVCaptureConnection], error: (any Swift.Error)?)
  @_Concurrency.MainActor(unsafe) public func showSelfieView()
  @objc deinit
}
extension SCSoftAutonomousSolutionSdk.SCSoftKycSelfieView : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
public enum PassportAuthenticationStatus {
  case notDone
  case success
  case failed
  public static func == (a: SCSoftAutonomousSolutionSdk.PassportAuthenticationStatus, b: SCSoftAutonomousSolutionSdk.PassportAuthenticationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public class NFCPassportModel {
  public var documentType: Swift.String {
    get
  }
  public var documentSubType: Swift.String {
    get
  }
  public var documentNumber: Swift.String {
    get
  }
  public var issuingAuthority: Swift.String {
    get
  }
  public var documentExpiryDate: Swift.String {
    get
  }
  public var dateOfBirth: Swift.String {
    get
  }
  public var gender: Swift.String {
    get
  }
  public var nationality: Swift.String {
    get
  }
  public var lastName: Swift.String {
    get
  }
  public var firstName: Swift.String {
    get
  }
  public var passportMRZ: Swift.String {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var residenceAddress: Swift.String? {
    get
  }
  public var phoneNumber: Swift.String? {
    get
  }
  public var personalNumber: Swift.String? {
    get
  }
  public var faceImageInfo: SCSoftAutonomousSolutionSdk.FaceImageInfo? {
    get
  }
  public var documentSigningCertificate: SCSoftAutonomousSolutionSdk.X509Wrapper? {
    get
  }
  public var countrySigningCertificate: SCSoftAutonomousSolutionSdk.X509Wrapper? {
    get
  }
  public var LDSVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  public var dataGroupsAvailable: [SCSoftAutonomousSolutionSdk.DataGroupId] {
    get
  }
  public var dataGroupsRead: [SCSoftAutonomousSolutionSdk.DataGroupId : SCSoftAutonomousSolutionSdk.DataGroup] {
    get
  }
  public var dataGroupHashes: [SCSoftAutonomousSolutionSdk.DataGroupId : SCSoftAutonomousSolutionSdk.DataGroupHash] {
    get
  }
  public var cardAccess: SCSoftAutonomousSolutionSdk.CardAccess? {
    get
  }
  public var BACStatus: SCSoftAutonomousSolutionSdk.PassportAuthenticationStatus {
    get
  }
  public var PACEStatus: SCSoftAutonomousSolutionSdk.PassportAuthenticationStatus {
    get
  }
  public var chipAuthenticationStatus: SCSoftAutonomousSolutionSdk.PassportAuthenticationStatus {
    get
  }
  public var passportCorrectlySigned: Swift.Bool {
    get
  }
  public var documentSigningCertificateVerified: Swift.Bool {
    get
  }
  public var passportDataNotTampered: Swift.Bool {
    get
  }
  public var activeAuthenticationPassed: Swift.Bool {
    get
  }
  public var activeAuthenticationChallenge: [Swift.UInt8] {
    get
  }
  public var activeAuthenticationSignature: [Swift.UInt8] {
    get
  }
  public var verificationErrors: [any Swift.Error] {
    get
  }
  public var isPACESupported: Swift.Bool {
    get
  }
  public var isChipAuthenticationSupported: Swift.Bool {
    get
  }
  public var passportImage: UIKit.UIImage? {
    get
  }
  public var signatureImage: UIKit.UIImage? {
    get
  }
  public var activeAuthenticationSupported: Swift.Bool {
    get
  }
  public init()
  public init(from dump: [Swift.String : Swift.String])
  public func addDataGroup(_ id: SCSoftAutonomousSolutionSdk.DataGroupId, dataGroup: SCSoftAutonomousSolutionSdk.DataGroup)
  public func getDataGroup(_ id: SCSoftAutonomousSolutionSdk.DataGroupId) -> SCSoftAutonomousSolutionSdk.DataGroup?
  public func dumpPassportData(selectedDataGroups: [SCSoftAutonomousSolutionSdk.DataGroupId], includeActiveAuthenticationData: Swift.Bool = false) -> [Swift.String : Swift.String]
  public func getHashesForDatagroups(hashAlgorythm: Swift.String) -> [SCSoftAutonomousSolutionSdk.DataGroupId : [Swift.UInt8]]
  public func verifyPassport(masterListURL: Foundation.URL?, useCMSVerification: Swift.Bool = false)
  public func verifyActiveAuthentication(challenge: [Swift.UInt8], signature: [Swift.UInt8])
  @objc deinit
}
@available(iOS 13, *)
public protocol SCSoftKycNfcViewDelegate : AnyObject {
  func didReadNfc(_ kycNfcView: SCSoftAutonomousSolutionSdk.SCSoftKycNfcView, didRead nfcInformation: SCSoftAutonomousSolutionSdk.SCSoftKycNFCInformation)
  func didReadNfcError(_ kycNfcView: SCSoftAutonomousSolutionSdk.SCSoftKycNfcView, errorMessage: Swift.String)
  func didClose(_ kycNfcView: SCSoftAutonomousSolutionSdk.SCSoftKycNfcView)
  func getNfcAvailable(_ kycNfcView: SCSoftAutonomousSolutionSdk.SCSoftKycNfcView, hasNfc: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @available(iOS 13, *)
@IBDesignable @_Concurrency.MainActor(unsafe) public class SCSoftKycNfcView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var language: Swift.String
  @_Concurrency.MainActor(unsafe) public var scanNfcPhotoTag: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var nfcErrorLimit: Swift.Int
  @_Concurrency.MainActor(unsafe) public var buttonBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var buttonTitleColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var buttonFont: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) public var buttonRadius: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var labelTextColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var labelFont: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) public var nfcRequestText: Swift.String
  @_Concurrency.MainActor(unsafe) public var nfcSuccessfulText: Swift.String
  @_Concurrency.MainActor(unsafe) public var nfcReadingDataGroupText: Swift.String
  @_Concurrency.MainActor(unsafe) public var noMrzDataText: Swift.String
  @_Concurrency.MainActor(unsafe) public var nfcErrorText: Swift.String
  @_Concurrency.MainActor(unsafe) public var infoNfcText: Swift.String
  @_Concurrency.MainActor(unsafe) public var speechText: Swift.String
  @_Concurrency.MainActor(unsafe) public var infoNoNfcText: Swift.String
  @_Concurrency.MainActor(unsafe) public var buttonNfcText: Swift.String
  @_Concurrency.MainActor(unsafe) public var buttonNoNfcText: Swift.String
  @_Concurrency.MainActor(unsafe) public var buttonCloseImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var IsSpeech: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenCloseButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenNfcInfo: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenNfcButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var startNfcScanningStartup: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var forceNfc: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var showPercentualProgress: Swift.Bool
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SCSoftAutonomousSolutionSdk.SCSoftKycNfcViewDelegate)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func initialize()
  @_Concurrency.MainActor(unsafe) public func stopTextSpeak()
  @_Concurrency.MainActor(unsafe) public func initiateScreen(documentNumber: Swift.String, birthDate: Swift.String, expiryDate: Swift.String)
  @_Concurrency.MainActor(unsafe) public func getMyImage(named: Swift.String) -> UIKit.UIImage?
  @objc @_Concurrency.MainActor(unsafe) public func nfcReadInput()
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class SecurityInfo {
  public func getObjectIdentifier() -> Swift.String
  public func getProtocolOIDString() -> Swift.String
  @objc deinit
}
public class SCSoftKycPersonDetails : Swift.Codable {
  public var name: Swift.String?
  public var surname: Swift.String?
  public var personalNumber: Swift.String?
  public var gender: Swift.String?
  public var birthDate: Swift.String?
  public var expiryDate: Swift.String?
  public var serialNumber: Swift.String?
  public var nationality: Swift.String?
  public var issuerAuthority: Swift.String?
  public var faceImageBase64: Swift.String?
  public var portraitImageBase64: Swift.String?
  public var signatureBase64: Swift.String?
  public var fingerPrints: [Swift.String]?
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 13, macOS 10.15, *)
public enum CertificateType {
  case documentSigningCertificate
  case issuerSigningCertificate
  public static func == (a: SCSoftAutonomousSolutionSdk.CertificateType, b: SCSoftAutonomousSolutionSdk.CertificateType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public enum CertificateItem : Swift.String {
  case fingerprint
  case issuerName
  case subjectName
  case serialNumber
  case signatureAlgorithm
  case publicKeyAlgorithm
  case notBefore
  case notAfter
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public class X509Wrapper {
  final public let cert: Swift.OpaquePointer
  public init?(with cert: Swift.OpaquePointer?)
  public func getItemsAsDict() -> [SCSoftAutonomousSolutionSdk.CertificateItem : Swift.String]
  public func certToPEM() -> Swift.String
  public func getFingerprint() -> Swift.String?
  public func getNotBeforeDate() -> Swift.String?
  public func getNotAfterDate() -> Swift.String?
  public func getSerialNumber() -> Swift.String?
  public func getSignatureAlgorithm() -> Swift.String?
  public func getPublicKeyAlgorithm() -> Swift.String?
  public func getIssuerName() -> Swift.String?
  public func getSubjectName() -> Swift.String?
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public class ASN1Item : Swift.CustomDebugStringConvertible {
  public init(line: Swift.String)
  public func getChild(_ child: Swift.Int) -> SCSoftAutonomousSolutionSdk.ASN1Item?
  public func getNumberOfChildren() -> Swift.Int
  public var debugDescription: Swift.String {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public class SimpleASN1DumpParser {
  public init()
  public func parse(data: Foundation.Data) throws -> SCSoftAutonomousSolutionSdk.ASN1Item
  public func test()
  @objc deinit
}
extension SCSoftAutonomousSolutionSdk.SwiftyTesseract {
  public enum Error : Swift.Error {
    case imageConversionError
    case unableToExtractTextFromImage
    case unableToCreateRenderer
    case unableToBeginDocument
    case unableToProcessPage
    case unableToEndDocument
    case unableToRetrieveIterator
    public static func == (a: SCSoftAutonomousSolutionSdk.SwiftyTesseract.Error, b: SCSoftAutonomousSolutionSdk.SwiftyTesseract.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ChipAuthenticationPublicKeyInfo : SCSoftAutonomousSolutionSdk.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  @objc deinit
}
public func binToHexRep(_ val: [Swift.UInt8], asArray: Swift.Bool = false) -> Swift.String
public func binToHexRep(_ val: Swift.UInt8) -> Swift.String
public func binToHex(_ val: Swift.UInt8) -> Swift.Int
public func binToHex(_ val: [Swift.UInt8]) -> Swift.UInt64
public func binToHex(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.UInt64
public func hexToBin(_ val: Swift.UInt64) -> [Swift.UInt8]
public func binToInt(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.Int
public func binToInt(_ val: [Swift.UInt8]) -> Swift.Int
public func intToBin(_ data: Swift.Int, pad: Swift.Int = 2) -> [Swift.UInt8]
public func hexRepToBin(_ val: Swift.String) -> [Swift.UInt8]
public func xor(_ kifd: [Swift.UInt8], _ response_kicc: [Swift.UInt8]) -> [Swift.UInt8]
public func generateRandomUInt8Array(_ size: Swift.Int) -> [Swift.UInt8]
public func pad(_ toPad: [Swift.UInt8], blockSize: Swift.Int) -> [Swift.UInt8]
public func unpad(_ tounpad: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func mac(algoName: SCSoftAutonomousSolutionSdk.SecureMessagingSupportedAlgorithms, key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func desMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func aesMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func wrapDO(b: Swift.UInt8, arr: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func unwrapDO(tag: Swift.UInt8, wrappedData: [Swift.UInt8]) throws -> [Swift.UInt8]
public func intToBytes(val: Swift.Int, removePadding: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func oidToBytes(oid: Swift.String, replaceTag: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: Swift.ArraySlice<Swift.UInt8>) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: [Swift.UInt8]) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func toAsn1Length(_ data: Swift.Int) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcHash(data: [Swift.UInt8], hashAlgorithm: Swift.String) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA1Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA224Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA256Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA512Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA384Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
public enum RecognitionLanguage {
  case afrikaans
  case albanian
  case amharic
  case arabic
  case assamese
  case azerbaijani
  case azerbaijaniCyrillic
  case basque
  case belarusian
  case bengali
  case bosnian
  case bulgarian
  case burmese
  case catalanAndValencian
  case cebuano
  case centralKhmer
  case chineseSimplified
  case chineseTraditional
  case croatian
  case czech
  case cherokee
  case danish
  case dutchFlemish
  case dzongkha
  case english
  case englishMiddle
  case esperanto
  case estonian
  case finnish
  case frankish
  case french
  case frenchMiddle
  case galician
  case georgian
  case georgianOld
  case german
  case greekAncient
  case greekModern
  case guajarati
  case haitian
  case hebrew
  case hindi
  case hungarian
  case icelandic
  case inuktitut
  case indonesian
  case italian
  case italianOld
  case irish
  case javanese
  case japanese
  case kannada
  case kazakh
  case korean
  case kurdish
  case kyrgyz
  case lao
  case latin
  case lithuanian
  case malayalam
  case macedonian
  case malay
  case maltese
  case marathi
  case nepali
  case norwegian
  case oriya
  case pashto
  case persian
  case polish
  case portugese
  case punjabi
  case romanian
  case russian
  case sanskrit
  case serbian
  case serbianLatin
  case sinhala
  case slovak
  case slovenian
  case spanish
  case spanishOld
  case swahili
  case swedish
  case syriac
  case tamil
  case tagalog
  case tajik
  case telugu
  case thai
  case tibetan
  case tigrinya
  case turkish
  case uighur
  case ukrainian
  case urdu
  case uzbek
  case uzbekCyrillic
  case vietnamese
  case welsh
  case yiddish
  case custom(Swift.String)
}
extension SCSoftAutonomousSolutionSdk.RecognitionLanguage : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public protocol KycSdkIdFrontDelegate : AnyObject {
  func didCaptureIdFrontPhoto(model: SCSoftAutonomousSolutionSdk.KycSdkIdFrontModel)
  func didCloseIdFront()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class KycSdkIdFrontViewController : UIKit.UIViewController, SCSoftAutonomousSolutionSdk.SCSoftKycIdFrontPhotoViewDelegate {
  @_Concurrency.MainActor(unsafe) public var infoIdFrontText: Swift.String
  @_Concurrency.MainActor(unsafe) public var speechText: Swift.String
  @_Concurrency.MainActor(unsafe) public var noBackCamera: Swift.String
  @_Concurrency.MainActor(unsafe) public var labelTextExit: Swift.String
  @_Concurrency.MainActor(unsafe) public var isHiddenCloseButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isSpeech: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var autoTakePhoto: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var hasCameraSound: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var headerVisibility: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var headerText: Swift.String
  @_Concurrency.MainActor(unsafe) public var headerTextColor: Swift.String
  @_Concurrency.MainActor(unsafe) public var headerTextSize: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var headerViewBackgroundColor: Swift.String
  @_Concurrency.MainActor(unsafe) public var headerBackButtonImage_base64: Swift.String
  @_Concurrency.MainActor(unsafe) public var headerBackButtonSize: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var headerViewSize: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var sdkModel: SCSoftAutonomousSolutionSdk.KycSdkIdFrontModel
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SCSoftAutonomousSolutionSdk.KycSdkIdFrontDelegate)?
  @_Concurrency.MainActor(unsafe) public var language: Swift.String
  @_Concurrency.MainActor(unsafe) public func didCaptureIdFrontFacePhoto(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycIdFrontPhotoView, image: UIKit.UIImage, imageBase64: Swift.String)
  @_Concurrency.MainActor(unsafe) public func didCaptureIdFrontPhoto(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycIdFrontPhotoView, image: UIKit.UIImage, imageBase64: Swift.String, cropImage: UIKit.UIImage, cropImageBase64: Swift.String)
  @_Concurrency.MainActor(unsafe) public func didClose(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycIdFrontPhotoView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup11 : SCSoftAutonomousSolutionSdk.DataGroup {
  public var fullName: Swift.String? {
    get
  }
  public var personalNumber: Swift.String? {
    get
  }
  public var dateOfBirth: Swift.String? {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var address: Swift.String? {
    get
  }
  public var telephone: Swift.String? {
    get
  }
  public var profession: Swift.String? {
    get
  }
  public var title: Swift.String? {
    get
  }
  public var personalSummary: Swift.String? {
    get
  }
  public var proofOfCitizenship: Swift.String? {
    get
  }
  public var tdNumbers: Swift.String? {
    get
  }
  public var custodyInfo: Swift.String? {
    get
  }
  override public var datagroupType: SCSoftAutonomousSolutionSdk.DataGroupId {
    get
  }
  @objc deinit
}
public class QKMRZParser {
  public init(ocrCorrection: Swift.Bool = false, isPassport: Swift.Bool)
  public func parse(mrzLines: [Swift.String]) -> SCSoftAutonomousSolutionSdk.QKMRZResult?
  public func parse(mrzString: Swift.String) -> SCSoftAutonomousSolutionSdk.QKMRZResult?
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class TagReader {
  @objc deinit
}
precedencegroup ForwardPipe {
  associativity: left
  higherThan: LogicalConjunctionPrecedence
}
infix operator |> : ForwardPipe
public func |> <T, U>(value: T, function: ((T) -> U)) -> U
public enum SecureMessagingSupportedAlgorithms {
  case DES
  case AES
  public static func == (a: SCSoftAutonomousSolutionSdk.SecureMessagingSupportedAlgorithms, b: SCSoftAutonomousSolutionSdk.SecureMessagingSupportedAlgorithms) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, *)
public class SecureMessaging {
  public init(encryptionAlgorithm: SCSoftAutonomousSolutionSdk.SecureMessagingSupportedAlgorithms = .DES, ksenc: [Swift.UInt8], ksmac: [Swift.UInt8], ssc: [Swift.UInt8])
  @objc deinit
}
@available(iOS 13, *)
public struct ResponseAPDU {
  public var data: [Swift.UInt8]
  public var sw1: Swift.UInt8
  public var sw2: Swift.UInt8
  public init(data: [Swift.UInt8], sw1: Swift.UInt8, sw2: Swift.UInt8)
}
@_hasMissingDesignatedInitializers public class SwiftyTesseract {
  public var whiteList: Swift.String? {
    get
    set
  }
  public var blackList: Swift.String? {
    get
    set
  }
  public var preserveInterwordSpaces: Swift.Bool? {
    get
    set
  }
  public var minimumCharacterHeight: Swift.Int? {
    get
    set
  }
  public var version: Swift.String? {
    get
  }
  convenience public init(languages: [SCSoftAutonomousSolutionSdk.RecognitionLanguage], dataSource: any SCSoftAutonomousSolutionSdk.LanguageModelDataSource = Bundle.main, engineMode: SCSoftAutonomousSolutionSdk.EngineMode = .lstmOnly)
  convenience public init(language: SCSoftAutonomousSolutionSdk.RecognitionLanguage, dataSource: any SCSoftAutonomousSolutionSdk.LanguageModelDataSource = Bundle.main, engineMode: SCSoftAutonomousSolutionSdk.EngineMode = .lstmOnly)
  @available(*, deprecated, message: "migrate to init(language:dataSource:engineMode:)")
  convenience public init(language: SCSoftAutonomousSolutionSdk.RecognitionLanguage, bundle: Foundation.Bundle = .main, engineMode: SCSoftAutonomousSolutionSdk.EngineMode = .lstmOnly)
  @available(*, deprecated, message: "migrate to init(languages:dataSource:engineMode:)")
  convenience public init(languages: [SCSoftAutonomousSolutionSdk.RecognitionLanguage], bundle: Foundation.Bundle = .main, engineMode: SCSoftAutonomousSolutionSdk.EngineMode = .lstmOnly)
  @objc deinit
}
extension SCSoftAutonomousSolutionSdk.SwiftyTesseract {
  @available(*, deprecated, message: "use performOCR(on:) or performOCRPublisher(on:)")
  public func performOCR(on image: UIKit.UIImage, completionHandler: (Swift.String?) -> ())
  public func performOCR(on image: UIKit.UIImage) -> Swift.Result<Swift.String, any Swift.Error>
  @available(iOS 13.0, *)
  public func performOCRPublisher(on image: UIKit.UIImage) -> Combine.AnyPublisher<Swift.String, any Swift.Error>
}
extension SCSoftAutonomousSolutionSdk.SwiftyTesseract {
  public func createPDF(from images: [UIKit.UIImage]) throws -> Foundation.Data
}
extension SCSoftAutonomousSolutionSdk.SwiftyTesseract {
  public func recognizedBlocks(for level: SCSoftAutonomousSolutionSdk.ResultIteratorLevel) -> Swift.Result<[SCSoftAutonomousSolutionSdk.RecognizedBlock], any Swift.Error>
}
@available(iOS 12, *)
public protocol KycSdkHeadPoseDelegate : AnyObject {
  func didAutonomousFacePredictionHeadPoseSuccess(model: SCSoftAutonomousSolutionSdk.KycSdkHeadPoseModel)
  func didCloseHeadPose()
}
@objc @_inheritsConvenienceInitializers @available(iOS 12, *)
@_Concurrency.MainActor(unsafe) public class KycSdkHeadPoseViewController : UIKit.UIViewController, SCSoftAutonomousSolutionSdk.SCSoftKycHeadPoseViewDelegate {
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SCSoftAutonomousSolutionSdk.KycSdkHeadPoseDelegate)?
  @_Concurrency.MainActor(unsafe) public var speechTextLeft: Swift.String
  @_Concurrency.MainActor(unsafe) public var speechTextRight: Swift.String
  @_Concurrency.MainActor(unsafe) public var infoHeadPoseTextPart1: Swift.String
  @_Concurrency.MainActor(unsafe) public var infoHeadPoseTextPart2: Swift.String
  @_Concurrency.MainActor(unsafe) public var txtInfoLeft: Swift.String
  @_Concurrency.MainActor(unsafe) public var txtInfoRight: Swift.String
  @_Concurrency.MainActor(unsafe) public var noFrontCamera: Swift.String
  @_Concurrency.MainActor(unsafe) public var txtContinue: Swift.String
  @_Concurrency.MainActor(unsafe) public var txtExit: Swift.String
  @_Concurrency.MainActor(unsafe) public var isHiddenCloseButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenInformationLabel: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var language: Swift.String
  @_Concurrency.MainActor(unsafe) public var screenRecord: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isSpeech: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var hasCameraSound: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var autoSizeFaceCircle: Swift.Bool
  @_Concurrency.MainActor(unsafe) public func didAutonomousFacePredictionHeadPoseSuccess(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycHeadPoseView, image: UIKit.UIImage, imageBase64: Swift.String, direction: SCSoftAutonomousSolutionSdk.HeadPosition)
  @_Concurrency.MainActor(unsafe) public func sendServiceScreenRecord(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycHeadPoseView, recordBase64: Foundation.URL)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public var direction: SCSoftAutonomousSolutionSdk.HeadPosition
  @_Concurrency.MainActor(unsafe) public func didClose(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycHeadPoseView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct QKMRZResult {
  public let documentType: Swift.String
  public let countryCode: Swift.String
  public let surnames: Swift.String
  public let givenNames: Swift.String
  public let documentNumber: Swift.String
  public let nationality: Swift.String
  public let birthDate: Foundation.Date?
  public let sex: Swift.String?
  public let expiryDate: Foundation.Date?
  public let personalNumber: Swift.String
  public let personalNumber2: Swift.String?
  public let isDocumentNumberValid: Swift.Bool
  public let isBirthDateValid: Swift.Bool
  public let isExpiryDateValid: Swift.Bool
  public let isPersonalNumberValid: Swift.Bool?
  public let allCheckDigitsValid: Swift.Bool
}
public enum SwiftyJSONError : Swift.Int, Swift.Error {
  case unsupportedType
  case indexOutOfBounds
  case elementTooDeep
  case wrongType
  case notExist
  case invalidJSON
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension SCSoftAutonomousSolutionSdk.SwiftyJSONError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public enum Type : Swift.Int {
  case number
  case string
  case bool
  case array
  case dictionary
  case null
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct JSON {
  public init(data: Foundation.Data, options opt: Foundation.JSONSerialization.ReadingOptions = []) throws
  public init(_ object: Any)
  public init(parseJSON jsonString: Swift.String)
  public mutating func merge(with other: SCSoftAutonomousSolutionSdk.JSON) throws
  public func merged(with other: SCSoftAutonomousSolutionSdk.JSON) throws -> SCSoftAutonomousSolutionSdk.JSON
  public var type: SCSoftAutonomousSolutionSdk.`Type` {
    get
  }
  public var error: SCSoftAutonomousSolutionSdk.SwiftyJSONError? {
    get
  }
  public var object: Any {
    get
    set
  }
  @available(*, unavailable, renamed: "null")
  public static var nullJSON: SCSoftAutonomousSolutionSdk.JSON {
    get
  }
  public static var null: SCSoftAutonomousSolutionSdk.JSON {
    get
  }
}
public enum Index<T> : Swift.Comparable {
  case array(Swift.Int)
  case dictionary(Swift.DictionaryIndex<Swift.String, T>)
  case null
  public static func == (lhs: SCSoftAutonomousSolutionSdk.Index<T>, rhs: SCSoftAutonomousSolutionSdk.Index<T>) -> Swift.Bool
  public static func < (lhs: SCSoftAutonomousSolutionSdk.Index<T>, rhs: SCSoftAutonomousSolutionSdk.Index<T>) -> Swift.Bool
}
public typealias JSONIndex = SCSoftAutonomousSolutionSdk.Index<SCSoftAutonomousSolutionSdk.JSON>
public typealias JSONRawIndex = SCSoftAutonomousSolutionSdk.Index<Any>
extension SCSoftAutonomousSolutionSdk.JSON : Swift.Collection {
  public typealias Index = SCSoftAutonomousSolutionSdk.JSONRawIndex
  public var startIndex: SCSoftAutonomousSolutionSdk.JSON.Index {
    get
  }
  public var endIndex: SCSoftAutonomousSolutionSdk.JSON.Index {
    get
  }
  public func index(after i: SCSoftAutonomousSolutionSdk.JSON.Index) -> SCSoftAutonomousSolutionSdk.JSON.Index
  public subscript(position: SCSoftAutonomousSolutionSdk.JSON.Index) -> (Swift.String, SCSoftAutonomousSolutionSdk.JSON) {
    get
  }
  public typealias Element = (Swift.String, SCSoftAutonomousSolutionSdk.JSON)
  public typealias Indices = Swift.DefaultIndices<SCSoftAutonomousSolutionSdk.JSON>
  public typealias Iterator = Swift.IndexingIterator<SCSoftAutonomousSolutionSdk.JSON>
  public typealias SubSequence = Swift.Slice<SCSoftAutonomousSolutionSdk.JSON>
}
public enum JSONKey {
  case index(Swift.Int)
  case key(Swift.String)
}
public protocol JSONSubscriptType {
  var jsonKey: SCSoftAutonomousSolutionSdk.JSONKey { get }
}
extension Swift.Int : SCSoftAutonomousSolutionSdk.JSONSubscriptType {
  public var jsonKey: SCSoftAutonomousSolutionSdk.JSONKey {
    get
  }
}
extension Swift.String : SCSoftAutonomousSolutionSdk.JSONSubscriptType {
  public var jsonKey: SCSoftAutonomousSolutionSdk.JSONKey {
    get
  }
}
extension SCSoftAutonomousSolutionSdk.JSON {
  public subscript(path: [any SCSoftAutonomousSolutionSdk.JSONSubscriptType]) -> SCSoftAutonomousSolutionSdk.JSON {
    get
    set
  }
  public subscript(path: any SCSoftAutonomousSolutionSdk.JSONSubscriptType...) -> SCSoftAutonomousSolutionSdk.JSON {
    get
    set
  }
}
extension SCSoftAutonomousSolutionSdk.JSON : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.StringLiteralType)
  public init(extendedGraphemeClusterLiteral value: Swift.StringLiteralType)
  public init(unicodeScalarLiteral value: Swift.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
}
extension SCSoftAutonomousSolutionSdk.JSON : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.IntegerLiteralType)
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
extension SCSoftAutonomousSolutionSdk.JSON : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.BooleanLiteralType)
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
}
extension SCSoftAutonomousSolutionSdk.JSON : Swift.ExpressibleByFloatLiteral {
  public init(floatLiteral value: Swift.FloatLiteralType)
  public typealias FloatLiteralType = Swift.FloatLiteralType
}
extension SCSoftAutonomousSolutionSdk.JSON : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Any)...)
  public typealias Key = Swift.String
  public typealias Value = Any
}
extension SCSoftAutonomousSolutionSdk.JSON : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: Any...)
  public typealias ArrayLiteralElement = Any
}
extension SCSoftAutonomousSolutionSdk.JSON : Swift.RawRepresentable {
  public init?(rawValue: Any)
  public var rawValue: Any {
    get
  }
  public func rawData(options opt: Foundation.JSONSerialization.WritingOptions = JSONSerialization.WritingOptions(rawValue: 0)) throws -> Foundation.Data
  public func rawString(_ encoding: Swift.String.Encoding = .utf8, options opt: Foundation.JSONSerialization.WritingOptions = .prettyPrinted) -> Swift.String?
  public func rawString(_ options: [SCSoftAutonomousSolutionSdk.writingOptionsKeys : Any]) -> Swift.String?
  public typealias RawValue = Any
}
extension SCSoftAutonomousSolutionSdk.JSON : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension SCSoftAutonomousSolutionSdk.JSON {
  public var array: [SCSoftAutonomousSolutionSdk.JSON]? {
    get
  }
  public var arrayValue: [SCSoftAutonomousSolutionSdk.JSON] {
    get
  }
  public var arrayObject: [Any]? {
    get
    set
  }
}
extension SCSoftAutonomousSolutionSdk.JSON {
  public var dictionary: [Swift.String : SCSoftAutonomousSolutionSdk.JSON]? {
    get
  }
  public var dictionaryValue: [Swift.String : SCSoftAutonomousSolutionSdk.JSON] {
    get
  }
  public var dictionaryObject: [Swift.String : Any]? {
    get
    set
  }
}
extension SCSoftAutonomousSolutionSdk.JSON {
  public var bool: Swift.Bool? {
    get
    set
  }
  public var boolValue: Swift.Bool {
    get
    set
  }
}
extension SCSoftAutonomousSolutionSdk.JSON {
  public var string: Swift.String? {
    get
    set
  }
  public var stringValue: Swift.String {
    get
    set
  }
}
extension SCSoftAutonomousSolutionSdk.JSON {
  public var number: Foundation.NSNumber? {
    get
    set
  }
  public var numberValue: Foundation.NSNumber {
    get
    set
  }
}
extension SCSoftAutonomousSolutionSdk.JSON {
  public var null: Foundation.NSNull? {
    get
    set
  }
  public func exists() -> Swift.Bool
}
extension SCSoftAutonomousSolutionSdk.JSON {
  public var url: Foundation.URL? {
    get
    set
  }
}
extension SCSoftAutonomousSolutionSdk.JSON {
  public var double: Swift.Double? {
    get
    set
  }
  public var doubleValue: Swift.Double {
    get
    set
  }
  public var float: Swift.Float? {
    get
    set
  }
  public var floatValue: Swift.Float {
    get
    set
  }
  public var int: Swift.Int? {
    get
    set
  }
  public var intValue: Swift.Int {
    get
    set
  }
  public var uInt: Swift.UInt? {
    get
    set
  }
  public var uIntValue: Swift.UInt {
    get
    set
  }
  public var int8: Swift.Int8? {
    get
    set
  }
  public var int8Value: Swift.Int8 {
    get
    set
  }
  public var uInt8: Swift.UInt8? {
    get
    set
  }
  public var uInt8Value: Swift.UInt8 {
    get
    set
  }
  public var int16: Swift.Int16? {
    get
    set
  }
  public var int16Value: Swift.Int16 {
    get
    set
  }
  public var uInt16: Swift.UInt16? {
    get
    set
  }
  public var uInt16Value: Swift.UInt16 {
    get
    set
  }
  public var int32: Swift.Int32? {
    get
    set
  }
  public var int32Value: Swift.Int32 {
    get
    set
  }
  public var uInt32: Swift.UInt32? {
    get
    set
  }
  public var uInt32Value: Swift.UInt32 {
    get
    set
  }
  public var int64: Swift.Int64? {
    get
    set
  }
  public var int64Value: Swift.Int64 {
    get
    set
  }
  public var uInt64: Swift.UInt64? {
    get
    set
  }
  public var uInt64Value: Swift.UInt64 {
    get
    set
  }
}
extension SCSoftAutonomousSolutionSdk.JSON : Swift.Comparable {
}
public func == (lhs: SCSoftAutonomousSolutionSdk.JSON, rhs: SCSoftAutonomousSolutionSdk.JSON) -> Swift.Bool
public func <= (lhs: SCSoftAutonomousSolutionSdk.JSON, rhs: SCSoftAutonomousSolutionSdk.JSON) -> Swift.Bool
public func >= (lhs: SCSoftAutonomousSolutionSdk.JSON, rhs: SCSoftAutonomousSolutionSdk.JSON) -> Swift.Bool
public func > (lhs: SCSoftAutonomousSolutionSdk.JSON, rhs: SCSoftAutonomousSolutionSdk.JSON) -> Swift.Bool
public func < (lhs: SCSoftAutonomousSolutionSdk.JSON, rhs: SCSoftAutonomousSolutionSdk.JSON) -> Swift.Bool
public enum writingOptionsKeys {
  case jsonSerialization
  case castNilToNSNull
  case maxObjextDepth
  case encoding
  public static func == (a: SCSoftAutonomousSolutionSdk.writingOptionsKeys, b: SCSoftAutonomousSolutionSdk.writingOptionsKeys) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SCSoftAutonomousSolutionSdk.JSON : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol LanguageModelDataSource {
  var pathToTrainedData: Swift.String { get }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ChipAuthenticationInfo : SCSoftAutonomousSolutionSdk.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
public enum EngineMode : libtesseract.TessOcrEngineMode.RawValue {
  case tesseractOnly
  case lstmOnly
  case tesseractLstmCombined
  public init?(rawValue: libtesseract.TessOcrEngineMode.RawValue)
  public typealias RawValue = libtesseract.TessOcrEngineMode.RawValue
  public var rawValue: libtesseract.TessOcrEngineMode.RawValue {
    get
  }
}
public protocol KycSdkNfcDelegate : AnyObject {
  func didReadNfc(didRead nfcData: SCSoftAutonomousSolutionSdk.KycSdkNfcModel)
  func didCloseNfc()
}
@objc @_inheritsConvenienceInitializers @available(iOS 13, *)
@_Concurrency.MainActor(unsafe) public class KycSdkNfcViewController : UIKit.UIViewController, SCSoftAutonomousSolutionSdk.SCSoftKycNfcViewDelegate {
  @_Concurrency.MainActor(unsafe) public var nfcRequestText: Swift.String
  @_Concurrency.MainActor(unsafe) public var nfcSuccessfulText: Swift.String
  @_Concurrency.MainActor(unsafe) public var nfcReadingDataGroupText: Swift.String
  @_Concurrency.MainActor(unsafe) public var noMrzDataText: Swift.String
  @_Concurrency.MainActor(unsafe) public var nfcErrorText: Swift.String
  @_Concurrency.MainActor(unsafe) public var infoNfcText: Swift.String
  @_Concurrency.MainActor(unsafe) public var speechText: Swift.String
  @_Concurrency.MainActor(unsafe) public var infoNoNfcText: Swift.String
  @_Concurrency.MainActor(unsafe) public var buttonNfcText: Swift.String
  @_Concurrency.MainActor(unsafe) public var buttonNoNfcText: Swift.String
  @_Concurrency.MainActor(unsafe) public var scanNfcPhotoTag: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var showPercentualProgress: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenCloseButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var IsSpeech: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var headerVisibility: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var headerText: Swift.String
  @_Concurrency.MainActor(unsafe) public var headerTextColor: Swift.String
  @_Concurrency.MainActor(unsafe) public var headerTextSize: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var headerViewBackgroundColor: Swift.String
  @_Concurrency.MainActor(unsafe) public var headerBackButtonImage_base64: Swift.String
  @_Concurrency.MainActor(unsafe) public var headerBackButtonSize: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var headerViewSize: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var kycSdkNfcOptions: SCSoftAutonomousSolutionSdk.KycSdkNfcOptions?
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SCSoftAutonomousSolutionSdk.KycSdkNfcDelegate)?
  @_Concurrency.MainActor(unsafe) public var language: Swift.String
  @_Concurrency.MainActor(unsafe) public func didReadNfcError(_ kycNfcView: SCSoftAutonomousSolutionSdk.SCSoftKycNfcView, errorMessage: Swift.String)
  @_Concurrency.MainActor(unsafe) public func didReadNfc(_ kycNfcView: SCSoftAutonomousSolutionSdk.SCSoftKycNfcView, didRead nfcInformation: SCSoftAutonomousSolutionSdk.SCSoftKycNFCInformation)
  @_Concurrency.MainActor(unsafe) public func didClose(_ kycNfcView: SCSoftAutonomousSolutionSdk.SCSoftKycNfcView)
  @_Concurrency.MainActor(unsafe) public func getNfcAvailable(_ kycNfcView: SCSoftAutonomousSolutionSdk.SCSoftKycNfcView, hasNfc: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@available(iOS 13, *)
public struct FaceImageInfo : Swift.Equatable {
  public enum Expression : Swift.Int {
    case unspecified
    case neutral
    case smileClosed
    case smileOpen
    case raisedEyebrows
    case eyesLookingAway
    case squinting
    case frowning
    public static func from(_ code: Swift.Int) -> SCSoftAutonomousSolutionSdk.FaceImageInfo.Expression?
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum EyeColor : Swift.Int {
    case unspecified
    case black
    case blue
    case brown
    case gray
    case green
    case multiColored
    case pink
    case unknown
    public static func from(_ code: Swift.Int) -> SCSoftAutonomousSolutionSdk.FaceImageInfo.EyeColor?
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum FaceImageType : Swift.Int {
    case basic
    case fullFrontal
    case tokenFrontal
    public static func from(_ code: Swift.Int) -> SCSoftAutonomousSolutionSdk.FaceImageInfo.FaceImageType?
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Features : Swift.Int {
    case featuresAreSpecified
    case glasses
    case moustache
    case beard
    case teethVisible
    case blink
    case mouthOpen
    case leftEyePatch
    case rightEyePath
    case darkGlasses
    case distortingMedicalCondition
    public static func from(_ code: Swift.Int) -> SCSoftAutonomousSolutionSdk.FaceImageInfo.Features?
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum HairColor : Swift.Int {
    case unspecified
    case bald
    case black
    case blonde
    case brown
    case gray
    case white
    case red
    case green
    case blue
    case unknown
    public static func from(_ code: Swift.Int) -> SCSoftAutonomousSolutionSdk.FaceImageInfo.HairColor?
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum ImageColorSpace : Swift.Int {
    case unspecified
    case rgb24
    case yuv422
    case gray8
    case other
    public static func from(_ code: Swift.Int) -> SCSoftAutonomousSolutionSdk.FaceImageInfo.ImageColorSpace?
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum ImageDataType : Swift.Int {
    case jpeg
    case jpeg2000
    public static func from(_ code: Swift.Int) -> SCSoftAutonomousSolutionSdk.FaceImageInfo.ImageDataType?
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum SourceType : Swift.Int {
    case unspecified
    case staticPhotoUnknownSource
    case staticPhotoDigitalCam
    case staticPhotoScanner
    case videoFrameUnknownSource
    case videoFrameAnalogCam
    case videoFrameDigitalCam
    case unknown
    public static func from(_ code: Swift.Int) -> SCSoftAutonomousSolutionSdk.FaceImageInfo.SourceType?
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public static func == (a: SCSoftAutonomousSolutionSdk.FaceImageInfo, b: SCSoftAutonomousSolutionSdk.FaceImageInfo) -> Swift.Bool
}
extension Foundation.Bundle : SCSoftAutonomousSolutionSdk.LanguageModelDataSource {
  public var pathToTrainedData: Swift.String {
    get
  }
}
public protocol SCSoftKycIdBackPhotoViewDelegate : AnyObject {
  func didCaptureIdBackPhoto(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycIdBackPhotoView, image: UIKit.UIImage, imageBase64: Swift.String, cropImage: UIKit.UIImage, cropImageBase64: Swift.String)
  func didClose(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycIdBackPhotoView)
  func didAgeControlOver18(status: Swift.Bool)
  func didReadMrz(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycIdBackPhotoView, didRead mrzInformation: SCSoftAutonomousSolutionSdk.SCSoftKycMRZInformation)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class SCSoftKycIdBackPhotoView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var language: Swift.String
  @_Concurrency.MainActor(unsafe) public var idBackImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var autoCropped_idBackImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var base64_idBackImage: Swift.String?
  @_Concurrency.MainActor(unsafe) public var base64_autoCropped_idBackImage: Swift.String?
  @_Concurrency.MainActor(unsafe) public var mrzInformation: SCSoftAutonomousSolutionSdk.SCSoftKycMRZInformation?
  @_Concurrency.MainActor(unsafe) public var mrzImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var infoIdBackText: Swift.String
  @_Concurrency.MainActor(unsafe) public var speechText: Swift.String
  @_Concurrency.MainActor(unsafe) public var noBackCamera: Swift.String
  @_Concurrency.MainActor(unsafe) public var labelTextExit: Swift.String
  @_Concurrency.MainActor(unsafe) public var IsSpeech: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var autoTakePhoto: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var activeColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var passiveColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var buttonBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var buttonTitleColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var buttonFont: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) public var buttonRadius: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var labelTextColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var labelFont: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) public var hasCameraSound: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var areaTopMargin: Swift.Double
  @_Concurrency.MainActor(unsafe) public var labelTopMargin: Swift.Double
  @_Concurrency.MainActor(unsafe) public var buttonCameraActiveImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var buttonCameraPassiveImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var buttonCloseImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var buttonFlashOnImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var buttonFlashOffImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var cameraFlashState: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isPassport: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenIdPhotoInfo: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenIdPhotoCameraButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenIdPhotoFlashButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenCloseButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SCSoftAutonomousSolutionSdk.SCSoftKycIdBackPhotoViewDelegate)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func startScanning()
  @_Concurrency.MainActor(unsafe) public func stopScanning()
  @_Concurrency.MainActor(unsafe) public func initiateScreen()
  @_Concurrency.MainActor(unsafe) public func getMyImage(named: Swift.String) -> UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public func refreshData()
  @objc deinit
}
extension SCSoftAutonomousSolutionSdk.SCSoftKycIdBackPhotoView : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup7 : SCSoftAutonomousSolutionSdk.DataGroup {
  public var imageData: [Swift.UInt8] {
    get
  }
  override public var datagroupType: SCSoftAutonomousSolutionSdk.DataGroupId {
    get
  }
  @objc deinit
}
public enum ImageFormat {
  case png
  case jpeg(CoreFoundation.CGFloat)
}
extension UIKit.UIImage {
  public func toBase64(format: SCSoftAutonomousSolutionSdk.ImageFormat) -> Swift.String?
}
public class SCSoftKycModel {
  public init()
  public var hasNfc: Swift.Bool
  public var ageOver18: Swift.Bool
  public var idFrontImage: UIKit.UIImage?
  public var idFrontFaceImage: UIKit.UIImage?
  public var idBackImage: UIKit.UIImage?
  public var selfieImage: UIKit.UIImage?
  public var mrzImage: UIKit.UIImage?
  public var autoCropped_idFrontImage: UIKit.UIImage?
  public var autoCropped_idBackImage: UIKit.UIImage?
  public var autoCropped_selfieImage: UIKit.UIImage?
  public var base64_idFrontImage: Swift.String?
  public var base64_idFrontFaceImage: Swift.String?
  public var base64_idBackImage: Swift.String?
  public var base64_selfieImage: Swift.String?
  public var base64_autoCropped_idFrontImage: Swift.String?
  public var base64_autoCropped_idBackImage: Swift.String?
  public var base64_autoCropped_selfieImage: Swift.String?
  public var nfcInformation: SCSoftAutonomousSolutionSdk.SCSoftKycNFCInformation?
  public var mrzInformation: SCSoftAutonomousSolutionSdk.SCSoftKycMRZInformation?
  @objc deinit
}
public class SCSoftKycMRZInformation : Swift.Codable {
  public var documentNumber: Swift.String?
  public var expiryDate: Swift.String?
  public var birthDate: Swift.String?
  public var documentType: Swift.String?
  public var countryCode: Swift.String?
  public var surnames: Swift.String?
  public var givenNames: Swift.String?
  public var nationality: Swift.String?
  public var gender: Swift.String?
  public var personalNumber: Swift.String?
  public var personalNumber2: Swift.String?
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public protocol KycSdkSelfieDelegate : AnyObject {
  func didCaptureSelfiePhoto(model: SCSoftAutonomousSolutionSdk.KycSdkSelfieModel)
  func didCloseSelfie()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class KycSdkSelfieViewController : UIKit.UIViewController, SCSoftAutonomousSolutionSdk.SCSoftKycSelfieViewDelegate {
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any SCSoftAutonomousSolutionSdk.KycSdkSelfieDelegate)?
  @_Concurrency.MainActor(unsafe) public var isSpeech: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var hasCameraSound: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var autoSizeFaceCircle: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var screenRecord: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isHiddenCloseButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var faceProximityControl: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var faceProximityPercentage: Swift.Int
  @_Concurrency.MainActor(unsafe) public var speechText: Swift.String
  @_Concurrency.MainActor(unsafe) public var infoSelfieText: Swift.String
  @_Concurrency.MainActor(unsafe) public var noFrontCamera: Swift.String
  @_Concurrency.MainActor(unsafe) public var txtExit: Swift.String
  @_Concurrency.MainActor(unsafe) public var language: Swift.String
  @_Concurrency.MainActor(unsafe) public func didCaptureSelfiePhoto(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycSelfieView, image: UIKit.UIImage, imageBase64: Swift.String, cropImage: UIKit.UIImage, cropImageBase64: Swift.String)
  @_Concurrency.MainActor(unsafe) public func sendServiceScreenRecord(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycSelfieView, recordBase64: Foundation.URL)
  @_Concurrency.MainActor(unsafe) public func didClose(_ kycView: SCSoftAutonomousSolutionSdk.SCSoftKycSelfieView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class QKMRZScanResult {
  final public let documentImage: UIKit.UIImage
  final public let documentType: Swift.String
  final public let countryCode: Swift.String
  final public let surnames: Swift.String
  final public let givenNames: Swift.String
  final public let documentNumber: Swift.String
  final public let nationality: Swift.String
  final public let birthDate: Foundation.Date?
  final public let sex: Swift.String?
  final public let expiryDate: Foundation.Date?
  final public let personalNumber: Swift.String
  final public let personalNumber2: Swift.String?
  public var faceImage: UIKit.UIImage? {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum NFCPassportReaderError : Swift.Error {
  case ResponseError(Swift.String, Swift.UInt8, Swift.UInt8)
  case InvalidResponse(dataGroupId: SCSoftAutonomousSolutionSdk.DataGroupId, expectedTag: Swift.Int, actualTag: Swift.Int)
  case UnexpectedError
  case NFCNotSupported
  case NoConnectedTag
  case D087Malformed
  case InvalidResponseChecksum
  case MissingMandatoryFields
  case CannotDecodeASN1Length
  case InvalidASN1Value
  case UnableToProtectAPDU
  case UnableToUnprotectAPDU
  case UnsupportedDataGroup
  case DataGroupNotRead
  case UnknownTag
  case UnknownImageFormat
  case NotImplemented
  case TagNotValid
  case ConnectionError
  case UserCanceled
  case InvalidMRZKey
  case MoreThanOneTagFound
  case InvalidHashAlgorithmSpecified
  case UnsupportedCipherAlgorithm
  case UnsupportedMappingType
  case PACEError(Swift.String, Swift.String)
  case ChipAuthenticationFailed
  case InvalidDataPassed(Swift.String)
  case NotYetSupported(Swift.String)
  case Unknown(any Swift.Error)
}
@available(iOS 13, macOS 10.15, *)
extension SCSoftAutonomousSolutionSdk.NFCPassportReaderError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public enum OpenSSLError : Swift.Error {
  case UnableToGetX509CertificateFromPKCS7(Swift.String)
  case UnableToVerifyX509CertificateForSOD(Swift.String)
  case VerifyAndReturnSODEncapsulatedData(Swift.String)
  case UnableToReadECPublicKey(Swift.String)
  case UnableToExtractSignedDataFromPKCS7(Swift.String)
  case VerifySignedAttributes(Swift.String)
  case UnableToParseASN1(Swift.String)
  case UnableToDecryptRSASignature(Swift.String)
}
@available(iOS 13, macOS 10.15, *)
extension SCSoftAutonomousSolutionSdk.OpenSSLError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum PassiveAuthenticationError : Swift.Error {
  case UnableToParseSODHashes(Swift.String)
  case InvalidDataGroupHash(Swift.String)
  case SODMissing(Swift.String)
}
extension SCSoftAutonomousSolutionSdk.PassiveAuthenticationError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup15 : SCSoftAutonomousSolutionSdk.DataGroup {
  public var rsaPublicKey: Swift.OpaquePointer? {
    get
  }
  public var ecdsaPublicKey: Swift.OpaquePointer? {
    get
  }
  override public var datagroupType: SCSoftAutonomousSolutionSdk.DataGroupId {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ActiveAuthenticationInfo : SCSoftAutonomousSolutionSdk.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getSignatureAlgorithmOIDString() -> Swift.String?
  @objc deinit
}
extension SCSoftAutonomousSolutionSdk.AnimationType : Swift.Equatable {}
extension SCSoftAutonomousSolutionSdk.AnimationType : Swift.Hashable {}
extension SCSoftAutonomousSolutionSdk.AnimatedIcon : Swift.Equatable {}
extension SCSoftAutonomousSolutionSdk.AnimatedIcon : Swift.Hashable {}
extension SCSoftAutonomousSolutionSdk.AlertIcon : Swift.Equatable {}
extension SCSoftAutonomousSolutionSdk.AlertIcon : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension SCSoftAutonomousSolutionSdk.DocTypeEnum : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension SCSoftAutonomousSolutionSdk.DocTypeEnum : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension SCSoftAutonomousSolutionSdk.DocTypeEnum : Swift.RawRepresentable {}
extension SCSoftAutonomousSolutionSdk.HeadPosition : Swift.Equatable {}
extension SCSoftAutonomousSolutionSdk.HeadPosition : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension SCSoftAutonomousSolutionSdk.DataGroupId : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension SCSoftAutonomousSolutionSdk.DataGroupId : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension SCSoftAutonomousSolutionSdk.DataGroupId : Swift.RawRepresentable {}
extension SCSoftAutonomousSolutionSdk.PACEMappingType : Swift.Equatable {}
extension SCSoftAutonomousSolutionSdk.PACEMappingType : Swift.Hashable {}
extension SCSoftAutonomousSolutionSdk.Device.Orientation : Swift.Equatable {}
extension SCSoftAutonomousSolutionSdk.Device.Orientation : Swift.Hashable {}
extension SCSoftAutonomousSolutionSdk.Device.CameraType : Swift.Equatable {}
extension SCSoftAutonomousSolutionSdk.Device.CameraType : Swift.Hashable {}
@available(iOS 11.0, watchOS 4.0, macOS 10.10.3, tvOS 11.0, *)
extension SCSoftAutonomousSolutionSdk.Device.ThermalState : Swift.Equatable {}
@available(iOS 11.0, watchOS 4.0, macOS 10.10.3, tvOS 11.0, *)
extension SCSoftAutonomousSolutionSdk.Device.ThermalState : Swift.Hashable {}
extension SCSoftAutonomousSolutionSdk.Device.CPU : Swift.Hashable {}
extension SCSoftAutonomousSolutionSdk.ResultIteratorLevel : Swift.Equatable {}
extension SCSoftAutonomousSolutionSdk.ResultIteratorLevel : Swift.Hashable {}
extension SCSoftAutonomousSolutionSdk.ResultIteratorLevel : Swift.RawRepresentable {}
extension SCSoftAutonomousSolutionSdk.PassportAuthenticationStatus : Swift.Equatable {}
extension SCSoftAutonomousSolutionSdk.PassportAuthenticationStatus : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension SCSoftAutonomousSolutionSdk.CertificateType : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension SCSoftAutonomousSolutionSdk.CertificateType : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension SCSoftAutonomousSolutionSdk.CertificateItem : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension SCSoftAutonomousSolutionSdk.CertificateItem : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension SCSoftAutonomousSolutionSdk.CertificateItem : Swift.RawRepresentable {}
extension SCSoftAutonomousSolutionSdk.SwiftyTesseract.Error : Swift.Equatable {}
extension SCSoftAutonomousSolutionSdk.SwiftyTesseract.Error : Swift.Hashable {}
extension SCSoftAutonomousSolutionSdk.SecureMessagingSupportedAlgorithms : Swift.Equatable {}
extension SCSoftAutonomousSolutionSdk.SecureMessagingSupportedAlgorithms : Swift.Hashable {}
extension SCSoftAutonomousSolutionSdk.SwiftyJSONError : Swift.Equatable {}
extension SCSoftAutonomousSolutionSdk.SwiftyJSONError : Swift.Hashable {}
extension SCSoftAutonomousSolutionSdk.SwiftyJSONError : Swift.RawRepresentable {}
extension SCSoftAutonomousSolutionSdk.`Type` : Swift.Equatable {}
extension SCSoftAutonomousSolutionSdk.`Type` : Swift.Hashable {}
extension SCSoftAutonomousSolutionSdk.`Type` : Swift.RawRepresentable {}
extension SCSoftAutonomousSolutionSdk.writingOptionsKeys : Swift.Equatable {}
extension SCSoftAutonomousSolutionSdk.writingOptionsKeys : Swift.Hashable {}
extension SCSoftAutonomousSolutionSdk.EngineMode : Swift.Equatable {}
extension SCSoftAutonomousSolutionSdk.EngineMode : Swift.Hashable {}
extension SCSoftAutonomousSolutionSdk.EngineMode : Swift.RawRepresentable {}
@available(iOS 13, *)
extension SCSoftAutonomousSolutionSdk.FaceImageInfo.Expression : Swift.Equatable {}
@available(iOS 13, *)
extension SCSoftAutonomousSolutionSdk.FaceImageInfo.Expression : Swift.Hashable {}
@available(iOS 13, *)
extension SCSoftAutonomousSolutionSdk.FaceImageInfo.Expression : Swift.RawRepresentable {}
@available(iOS 13, *)
extension SCSoftAutonomousSolutionSdk.FaceImageInfo.EyeColor : Swift.Equatable {}
@available(iOS 13, *)
extension SCSoftAutonomousSolutionSdk.FaceImageInfo.EyeColor : Swift.Hashable {}
@available(iOS 13, *)
extension SCSoftAutonomousSolutionSdk.FaceImageInfo.EyeColor : Swift.RawRepresentable {}
@available(iOS 13, *)
extension SCSoftAutonomousSolutionSdk.FaceImageInfo.FaceImageType : Swift.Equatable {}
@available(iOS 13, *)
extension SCSoftAutonomousSolutionSdk.FaceImageInfo.FaceImageType : Swift.Hashable {}
@available(iOS 13, *)
extension SCSoftAutonomousSolutionSdk.FaceImageInfo.FaceImageType : Swift.RawRepresentable {}
@available(iOS 13, *)
extension SCSoftAutonomousSolutionSdk.FaceImageInfo.Features : Swift.Equatable {}
@available(iOS 13, *)
extension SCSoftAutonomousSolutionSdk.FaceImageInfo.Features : Swift.Hashable {}
@available(iOS 13, *)
extension SCSoftAutonomousSolutionSdk.FaceImageInfo.Features : Swift.RawRepresentable {}
@available(iOS 13, *)
extension SCSoftAutonomousSolutionSdk.FaceImageInfo.HairColor : Swift.Equatable {}
@available(iOS 13, *)
extension SCSoftAutonomousSolutionSdk.FaceImageInfo.HairColor : Swift.Hashable {}
@available(iOS 13, *)
extension SCSoftAutonomousSolutionSdk.FaceImageInfo.HairColor : Swift.RawRepresentable {}
@available(iOS 13, *)
extension SCSoftAutonomousSolutionSdk.FaceImageInfo.ImageColorSpace : Swift.Equatable {}
@available(iOS 13, *)
extension SCSoftAutonomousSolutionSdk.FaceImageInfo.ImageColorSpace : Swift.Hashable {}
@available(iOS 13, *)
extension SCSoftAutonomousSolutionSdk.FaceImageInfo.ImageColorSpace : Swift.RawRepresentable {}
@available(iOS 13, *)
extension SCSoftAutonomousSolutionSdk.FaceImageInfo.ImageDataType : Swift.Equatable {}
@available(iOS 13, *)
extension SCSoftAutonomousSolutionSdk.FaceImageInfo.ImageDataType : Swift.Hashable {}
@available(iOS 13, *)
extension SCSoftAutonomousSolutionSdk.FaceImageInfo.ImageDataType : Swift.RawRepresentable {}
@available(iOS 13, *)
extension SCSoftAutonomousSolutionSdk.FaceImageInfo.SourceType : Swift.Equatable {}
@available(iOS 13, *)
extension SCSoftAutonomousSolutionSdk.FaceImageInfo.SourceType : Swift.Hashable {}
@available(iOS 13, *)
extension SCSoftAutonomousSolutionSdk.FaceImageInfo.SourceType : Swift.RawRepresentable {}
